{
  "stats": {
    "suites": 9,
    "tests": 33,
    "passes": 33,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-21T19:29:02.522Z",
    "end": "2025-09-21T19:29:02.759Z",
    "duration": 237,
    "testsRegistered": 33,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "76d60673-fb3b-4ae4-9eed-d79a960a36ff",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cbe28195-ca63-42b7-befb-c9626c55fa60",
          "title": "Transfer Controller",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\transferController.test.js",
          "file": "\\test\\rest\\controller\\transferController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2fe78852-6c67-4ac3-af0b-6f6ee2b1a2c1",
              "title": "POST /transfers",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\transferController.test.js",
              "file": "\\test\\rest\\controller\\transferController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /transfers\"",
                  "fullTitle": "Transfer Controller POST /transfers \"before all\" hook in \"POST /transfers\"",
                  "timedOut": false,
                  "duration": 27,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post(\"/users/register\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\nawait request(app).post(\"/users/register\").send({\n  username: \"novoUsuario1\",\n  password: \"senha123\",\n});",
                  "err": {},
                  "uuid": "2a15a4f6-3169-4553-9ac6-ec28db9ea155",
                  "parentUUID": "2fe78852-6c67-4ac3-af0b-6f6ee2b1a2c1",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"before each\" hook in \"POST /transfers\"",
                  "fullTitle": "Transfer Controller POST /transfers \"before each\" hook in \"POST /transfers\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(app).post(\"/users/login\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\ntoken = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "a9af8f4b-b761-4f5e-acd3-5a9121086d4f",
                  "parentUUID": "2fe78852-6c67-4ac3-af0b-6f6ee2b1a2c1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Realizar uma transferência para usuário não cadastrado",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência para usuário não cadastrado",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"stopa\", to: \"alberto\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Usuário não encontrado\");",
                  "err": {},
                  "uuid": "32604b6d-5eab-4790-abf1-e28e608a9e19",
                  "parentUUID": "2fe78852-6c67-4ac3-af0b-6f6ee2b1a2c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência não informando os usuários de envio e recebimento",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência não informando os usuários de envio e recebimento",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"\", to: \"\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
                  "err": {},
                  "uuid": "6c858074-b4b8-45aa-be39-10cb31798539",
                  "parentUUID": "2fe78852-6c67-4ac3-af0b-6f6ee2b1a2c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência com saldo insuficiente",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência com saldo insuficiente",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 20000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Saldo insuficiente\");",
                  "err": {},
                  "uuid": "c5ad15bf-e9e4-4bd8-a4cf-ab3f28ce94a1",
                  "parentUUID": "2fe78852-6c67-4ac3-af0b-6f6ee2b1a2c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência com valor negativo",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência com valor negativo",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: -1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
                  "err": {},
                  "uuid": "eb9b3d1b-031f-459c-b990-3403777c5c73",
                  "parentUUID": "2fe78852-6c67-4ac3-af0b-6f6ee2b1a2c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência com valor zero",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência com valor zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 0 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
                  "err": {},
                  "uuid": "138fe91c-5d12-46f2-80bb-29837a7a25bb",
                  "parentUUID": "2fe78852-6c67-4ac3-af0b-6f6ee2b1a2c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 401 se não enviar token",
                  "fullTitle": "Transfer Controller POST /transfers Deve retornar 401 se não enviar token",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(response.status).to.equal(401);\nexpect(response.body).to.have.property(\"error\");",
                  "err": {},
                  "uuid": "d6e76e6f-b9d9-4025-b811-bc4a258c03ef",
                  "parentUUID": "2fe78852-6c67-4ac3-af0b-6f6ee2b1a2c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência autenticada",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência autenticada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.have.property(\"from\", \"novoUsuario\");\nexpect(response.body).to.have.property(\"to\", \"novoUsuario1\");\nexpect(response.body).to.have.property(\"amount\", 1000);\n// console.log(\"Token usado:\", token);\n// console.log(\"Response body:\", response.body);",
                  "err": {},
                  "uuid": "d4204494-b663-4e38-b3a7-ed98bed37a6b",
                  "parentUUID": "2fe78852-6c67-4ac3-af0b-6f6ee2b1a2c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não permite transferência >= 5000 para não favorecido",
                  "fullTitle": "Transfer Controller POST /transfers Não permite transferência >= 5000 para não favorecido",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 5000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Transferências acima de R$ 5.000,00 só para favorecidos\"\n);\n// console.log(\"Response body:\", response.body);",
                  "err": {},
                  "uuid": "0595a29c-6269-4422-a54a-9d38baf2fee4",
                  "parentUUID": "2fe78852-6c67-4ac3-af0b-6f6ee2b1a2c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve listar as transferências realizadas em memória",
                  "fullTitle": "Transfer Controller POST /transfers Deve listar as transferências realizadas em memória",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const valores = [500, 1233, 1333];\nfor (const amount of valores) {\n  await request(app)\n    .post(\"/transfers\")\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount });\n}\nconst response = await request(app)\n  .get(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`);\n// console.log(\"Listagem de transferências:\", response.body);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");\nfor (const amount of valores) {\n  expect(\n    response.body.some(\n      (t) =>\n        t.from === \"novoUsuario\" &&\n        t.to === \"novoUsuario1\" &&\n        t.amount === amount\n    )\n  ).to.be.true;\n}",
                  "err": {},
                  "uuid": "bf75dc46-335c-4b9b-9b5a-323a1d0ac3f3",
                  "parentUUID": "2fe78852-6c67-4ac3-af0b-6f6ee2b1a2c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32604b6d-5eab-4790-abf1-e28e608a9e19",
                "6c858074-b4b8-45aa-be39-10cb31798539",
                "c5ad15bf-e9e4-4bd8-a4cf-ab3f28ce94a1",
                "eb9b3d1b-031f-459c-b990-3403777c5c73",
                "138fe91c-5d12-46f2-80bb-29837a7a25bb",
                "d6e76e6f-b9d9-4025-b811-bc4a258c03ef",
                "d4204494-b663-4e38-b3a7-ed98bed37a6b",
                "0595a29c-6269-4422-a54a-9d38baf2fee4",
                "bf75dc46-335c-4b9b-9b5a-323a1d0ac3f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "766edb5c-1acb-4e3d-9bf8-fa5d6b6002e7",
          "title": "Transfer Controller - Unit",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\transferController.unit.test.js",
          "file": "\\test\\rest\\controller\\transferController.unit.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Transfer Controller - Unit\"",
              "fullTitle": "Transfer Controller - Unit \"before all\" hook in \"Transfer Controller - Unit\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post(\"/users/register\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\nawait request(app).post(\"/users/register\").send({\n  username: \"novoUsuario1\",\n  password: \"senha123\",\n});",
              "err": {},
              "uuid": "eb2a37b7-4635-4891-a647-8183a965bf96",
              "parentUUID": "766edb5c-1acb-4e3d-9bf8-fa5d6b6002e7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Transfer Controller - Unit\"",
              "fullTitle": "Transfer Controller - Unit \"before each\" hook in \"Transfer Controller - Unit\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respostaLogin = await request(app).post(\"/users/login\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "29c218ed-1cb7-4c3e-94a1-7e2491178e53",
              "parentUUID": "766edb5c-1acb-4e3d-9bf8-fa5d6b6002e7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Transfer Controller - Unit\"",
              "fullTitle": "Transfer Controller - Unit \"after each\" hook in \"Transfer Controller - Unit\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "437b9537-9d7b-4b6b-afa3-2cfdb6f71bd2",
              "parentUUID": "766edb5c-1acb-4e3d-9bf8-fa5d6b6002e7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Deve retornar erro do service ao tentar transferir (stub)",
              "fullTitle": "Transfer Controller - Unit Deve retornar erro do service ao tentar transferir (stub)",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.stub(transferService, \"transfer\").throws(new Error(\"Erro simulado\"));\nconst response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Erro simulado\");",
              "err": {},
              "uuid": "f818c36b-c868-4f21-ab3d-2eece037cfa8",
              "parentUUID": "766edb5c-1acb-4e3d-9bf8-fa5d6b6002e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve chamar o service de transferência uma vez (spy)",
              "fullTitle": "Transfer Controller - Unit Deve chamar o service de transferência uma vez (spy)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spy = sinon.spy(transferService, \"transfer\");\nawait request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(spy.calledOnce).to.be.true;\nspy.restore();",
              "err": {},
              "uuid": "f21be425-16ad-44fb-bfde-045af8a7e541",
              "parentUUID": "766edb5c-1acb-4e3d-9bf8-fa5d6b6002e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve simular retorno de sucesso do service (stub)",
              "fullTitle": "Transfer Controller - Unit Deve simular retorno de sucesso do service (stub)",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeTransfer = {\n  from: \"novoUsuario\",\n  to: \"novoUsuario1\",\n  amount: 123,\n  date: new Date(),\n};\nsinon.stub(transferService, \"transfer\").returns(fakeTransfer);\nconst response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 123 });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.include({\n  from: \"novoUsuario\",\n  to: \"novoUsuario1\",\n  amount: 123,\n});",
              "err": {},
              "uuid": "3732c9de-06b1-4669-8c36-bed050b90aae",
              "parentUUID": "766edb5c-1acb-4e3d-9bf8-fa5d6b6002e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve usar mock para esperar chamada do service",
              "fullTitle": "Transfer Controller - Unit Deve usar mock para esperar chamada do service",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mock = sinon.mock(transferService);\nmock\n  .expects(\"transfer\")\n  .once()\n  .withArgs({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 555 });\nawait request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 555 });\nmock.verify();\nmock.restore();",
              "err": {},
              "uuid": "503d8e04-dc92-49b6-bafd-8b3b96584cd8",
              "parentUUID": "766edb5c-1acb-4e3d-9bf8-fa5d6b6002e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não permite transferência >= 5000 para não favorecido (unit)",
              "fullTitle": "Transfer Controller - Unit Não permite transferência >= 5000 para não favorecido (unit)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon\n  .stub(transferService, \"transfer\")\n  .throws(\n    new Error(\"Transferências acima de R$ 5.000,00 só para favorecidos\")\n  );\nconst response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 5000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Transferências acima de R$ 5.000,00 só para favorecidos\"\n);\n// console.log(\"Response body:\", response.body);",
              "err": {},
              "uuid": "bb754985-03a9-4390-9826-944e13458c16",
              "parentUUID": "766edb5c-1acb-4e3d-9bf8-fa5d6b6002e7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f818c36b-c868-4f21-ab3d-2eece037cfa8",
            "f21be425-16ad-44fb-bfde-045af8a7e541",
            "3732c9de-06b1-4669-8c36-bed050b90aae",
            "503d8e04-dc92-49b6-bafd-8b3b96584cd8",
            "bb754985-03a9-4390-9826-944e13458c16"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ccc75c78-de8e-4c57-afdf-d7f952f214c9",
          "title": "User Controller",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
          "file": "\\test\\rest\\controller\\userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "43fa9d8f-addb-446a-89d7-0bc300e5117b",
              "title": "POST /users/register",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
              "file": "\\test\\rest\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve registrar um novo usuário com sucesso",
                  "fullTitle": "User Controller POST /users/register Deve registrar um novo usuário com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioTeste\", password: \"senha123\" });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.have.property(\"username\", \"usuarioTeste\");\nexpect(response.body).to.have.property(\"favorecidos\");",
                  "err": {},
                  "uuid": "6c05e106-156b-4cc4-93f0-5553e11359b0",
                  "parentUUID": "43fa9d8f-addb-446a-89d7-0bc300e5117b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve registrar usuário sem username ou password",
                  "fullTitle": "User Controller POST /users/register Não deve registrar usuário sem username ou password",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"\", password: \"\" });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Usuário e senha são obrigatórios\"\n);",
                  "err": {},
                  "uuid": "d4f21c37-d2e0-448c-88bb-09cd71892d1b",
                  "parentUUID": "43fa9d8f-addb-446a-89d7-0bc300e5117b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve registrar usuário duplicado",
                  "fullTitle": "User Controller POST /users/register Não deve registrar usuário duplicado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioDuplicado\", password: \"senha123\" });\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioDuplicado\", password: \"senha123\" });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\");",
                  "err": {},
                  "uuid": "ea152c0f-7158-42f0-b277-bc9aced15d6b",
                  "parentUUID": "43fa9d8f-addb-446a-89d7-0bc300e5117b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c05e106-156b-4cc4-93f0-5553e11359b0",
                "d4f21c37-d2e0-448c-88bb-09cd71892d1b",
                "ea152c0f-7158-42f0-b277-bc9aced15d6b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "c840221c-0b83-457c-83f8-2d5e7528e66f",
              "title": "POST /users/login",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
              "file": "\\test\\rest\\controller\\userController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /users/login\"",
                  "fullTitle": "User Controller POST /users/login \"before all\" hook in \"POST /users/login\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioLogin\", password: \"senha123\" });",
                  "err": {},
                  "uuid": "9e7ac77c-8ff7-4191-90a3-551f6f6dcd7c",
                  "parentUUID": "c840221c-0b83-457c-83f8-2d5e7528e66f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve fazer login com sucesso e retornar token",
                  "fullTitle": "User Controller POST /users/login Deve fazer login com sucesso e retornar token",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send({ username: \"usuarioLogin\", password: \"senha123\" });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property(\"token\");\nexpect(response.body).to.have.property(\"username\", \"usuarioLogin\");\nexpect(response.body).to.have.property(\"favorecidos\");\nexpect(response.body).to.have.property(\"saldo\");",
                  "err": {},
                  "uuid": "7793d545-e164-427a-9261-14dda3bb9410",
                  "parentUUID": "c840221c-0b83-457c-83f8-2d5e7528e66f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve logar com senha errada",
                  "fullTitle": "User Controller POST /users/login Não deve logar com senha errada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send({ username: \"usuarioLogin\", password: \"senhaErrada\" });\nexpect(response.status).to.equal(401);\nexpect(response.body).to.have.property(\"error\");",
                  "err": {},
                  "uuid": "f82efac3-ba77-4568-b657-a9250a127dd4",
                  "parentUUID": "c840221c-0b83-457c-83f8-2d5e7528e66f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve logar sem username ou password",
                  "fullTitle": "User Controller POST /users/login Não deve logar sem username ou password",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send({ username: \"\", password: \"\" });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Usuário e senha são obrigatórios\"\n);",
                  "err": {},
                  "uuid": "103970a1-b686-4200-baa5-2368139223ca",
                  "parentUUID": "c840221c-0b83-457c-83f8-2d5e7528e66f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7793d545-e164-427a-9261-14dda3bb9410",
                "f82efac3-ba77-4568-b657-a9250a127dd4",
                "103970a1-b686-4200-baa5-2368139223ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e6b7945e-37f4-4884-92b1-3110f861d4e7",
              "title": "GET /users",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
              "file": "\\test\\rest\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve listar todos os usuários cadastrados",
                  "fullTitle": "User Controller GET /users Deve listar todos os usuários cadastrados",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app).get(\"/users\");\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");\nexpect(response.body.length).to.be.greaterThan(0);",
                  "err": {},
                  "uuid": "6f441908-07ef-4f47-bd29-6408f7eef69e",
                  "parentUUID": "e6b7945e-37f4-4884-92b1-3110f861d4e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f441908-07ef-4f47-bd29-6408f7eef69e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "686bcb81-964a-4fb6-97a4-1321decb1835",
          "title": "Transfer Controller - External API",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\external\\transfer.external.test.js",
          "file": "\\test\\rest\\external\\transfer.external.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Transfer Controller - External API\"",
              "fullTitle": "Transfer Controller - External API \"before all\" hook in \"Transfer Controller - External API\"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Garante que os usuários existem\nawait api\n  .post(\"/users/register\")\n  .send({ username: \"novoUsuarioExt\", password: \"senha123\" });\nawait api\n  .post(\"/users/register\")\n  .send({ username: \"novoUsuario1Ext\", password: \"senha123\" });",
              "err": {},
              "uuid": "b0895da9-a158-4c0f-8c38-b30faef9f76c",
              "parentUUID": "686bcb81-964a-4fb6-97a4-1321decb1835",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Transfer Controller - External API\"",
              "fullTitle": "Transfer Controller - External API \"before each\" hook in \"Transfer Controller - External API\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Faz login para obter token\nconst respostaLogin = await api\n  .post(\"/users/login\")\n  .send({ username: \"novoUsuarioExt\", password: \"senha123\" });\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "8d2038cb-c37a-497b-be00-7f9034241005",
              "parentUUID": "686bcb81-964a-4fb6-97a4-1321decb1835",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Realizar uma transferência para usuário não cadastrado",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência para usuário não cadastrado",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"stopa\", to: \"alberto\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Usuário não encontrado\");",
              "err": {},
              "uuid": "0868e723-be47-4ec2-922a-4a20b85dca3d",
              "parentUUID": "686bcb81-964a-4fb6-97a4-1321decb1835",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência não informando os usuários de envio e recebimento",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência não informando os usuários de envio e recebimento",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"\", to: \"\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
              "err": {},
              "uuid": "551ff4f5-6abe-4336-a7b7-2821dd2be0c2",
              "parentUUID": "686bcb81-964a-4fb6-97a4-1321decb1835",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência com saldo insuficiente",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência com saldo insuficiente",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 20000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Saldo insuficiente\");",
              "err": {},
              "uuid": "fb822f7b-ba0c-4352-a0f3-4918c6b7e681",
              "parentUUID": "686bcb81-964a-4fb6-97a4-1321decb1835",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência com valor negativo",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência com valor negativo",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: -1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
              "err": {},
              "uuid": "6b05a8f9-8efe-4b19-ae2d-772c906ec63a",
              "parentUUID": "686bcb81-964a-4fb6-97a4-1321decb1835",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência com valor zero",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência com valor zero",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 0 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
              "err": {},
              "uuid": "7c0836bb-6029-4917-ade5-a7dfaa0dad41",
              "parentUUID": "686bcb81-964a-4fb6-97a4-1321decb1835",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar 401 se não enviar token",
              "fullTitle": "Transfer Controller - External API Deve retornar 401 se não enviar token",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 1000 });\nexpect(response.status).to.equal(401);\nexpect(response.body).to.have.property(\"error\");",
              "err": {},
              "uuid": "f67c8c3a-13f2-41ed-93f0-8fc09870ab03",
              "parentUUID": "686bcb81-964a-4fb6-97a4-1321decb1835",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência autenticada",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência autenticada",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 10 });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.have.property(\"from\", \"novoUsuarioExt\");\nexpect(response.body).to.have.property(\"to\", \"novoUsuario1Ext\");\nexpect(response.body).to.have.property(\"amount\", 10);",
              "err": {},
              "uuid": "4459af54-a811-4c02-9ddf-3af0a4584a46",
              "parentUUID": "686bcb81-964a-4fb6-97a4-1321decb1835",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não permite transferência >= 5000 para não favorecido (external)",
              "fullTitle": "Transfer Controller - External API Não permite transferência >= 5000 para não favorecido (external)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario1Ext\", to: \"novoUsuarioExt\", amount: 5000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Transferências acima de R$ 5.000,00 só para favorecidos\"\n);",
              "err": {},
              "uuid": "cb96b142-19c7-4eac-b667-90fa0bc28bff",
              "parentUUID": "686bcb81-964a-4fb6-97a4-1321decb1835",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar as transferências realizadas em memória",
              "fullTitle": "Transfer Controller - External API Deve listar as transferências realizadas em memória",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const valores = [500, 1233, 1333];\nfor (const amount of valores) {\n  await api\n    .post(\"/transfers\")\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount });\n}\nconst response = await api\n  .get(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`);\n// console.log(\"Listagem de transferências:\", response.body);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");\nfor (const amount of valores) {\n  expect(\n    response.body.some(\n      (t) =>\n        t.from === \"novoUsuarioExt\" &&\n        t.to === \"novoUsuario1Ext\" &&\n        t.amount === amount\n    )\n  ).to.be.true;\n}",
              "err": {},
              "uuid": "cac13bbb-a936-43e6-8b5b-0d289d5846c2",
              "parentUUID": "686bcb81-964a-4fb6-97a4-1321decb1835",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0868e723-be47-4ec2-922a-4a20b85dca3d",
            "551ff4f5-6abe-4336-a7b7-2821dd2be0c2",
            "fb822f7b-ba0c-4352-a0f3-4918c6b7e681",
            "6b05a8f9-8efe-4b19-ae2d-772c906ec63a",
            "7c0836bb-6029-4917-ade5-a7dfaa0dad41",
            "f67c8c3a-13f2-41ed-93f0-8fc09870ab03",
            "4459af54-a811-4c02-9ddf-3af0a4584a46",
            "cb96b142-19c7-4eac-b667-90fa0bc28bff",
            "cac13bbb-a936-43e6-8b5b-0d289d5846c2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "6ce19071-050d-47f5-9140-a49d6e6bbfbf",
          "title": "User Controller - External API",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\external\\user.external.test.js",
          "file": "\\test\\rest\\external\\user.external.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve registrar um novo usuário via API externa",
              "fullTitle": "User Controller - External API Deve registrar um novo usuário via API externa",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/users/register\")\n  .send({ username: \"usuarioExt\", password: \"senha123\" });\nexpect([201, 400]).to.include(response.status); // 400 se já existir",
              "err": {},
              "uuid": "cfed0e1a-6c2a-474f-84d2-ac834e55506a",
              "parentUUID": "6ce19071-050d-47f5-9140-a49d6e6bbfbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve fazer login via API externa",
              "fullTitle": "User Controller - External API Deve fazer login via API externa",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/users/login\")\n  .send({ username: \"usuarioExt\", password: \"senha123\" });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property(\"token\");",
              "err": {},
              "uuid": "5a9eaeae-bf39-400d-99ab-9e25d83fa507",
              "parentUUID": "6ce19071-050d-47f5-9140-a49d6e6bbfbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários via API externa",
              "fullTitle": "User Controller - External API Deve listar usuários via API externa",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api.get(\"/users\");\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");",
              "err": {},
              "uuid": "957af818-e88b-43c1-a625-58aae877c05d",
              "parentUUID": "6ce19071-050d-47f5-9140-a49d6e6bbfbf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cfed0e1a-6c2a-474f-84d2-ac834e55506a",
            "5a9eaeae-bf39-400d-99ab-9e25d83fa507",
            "957af818-e88b-43c1-a625-58aae877c05d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}