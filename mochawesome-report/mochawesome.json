{
  "stats": {
    "suites": 9,
    "tests": 33,
    "passes": 33,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-21T19:53:50.938Z",
    "end": "2025-09-21T19:53:51.181Z",
    "duration": 243,
    "testsRegistered": 33,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f337a17a-57e4-46ff-a651-089ea676ceac",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "12254731-fd76-4a27-b886-14e467c36ba1",
          "title": "Transfer Controller",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\transferController.test.js",
          "file": "\\test\\rest\\controller\\transferController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ffffe0c1-3da7-4d1b-a896-cd2d0560bb49",
              "title": "POST /transfers",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\transferController.test.js",
              "file": "\\test\\rest\\controller\\transferController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /transfers\"",
                  "fullTitle": "Transfer Controller POST /transfers \"before all\" hook in \"POST /transfers\"",
                  "timedOut": false,
                  "duration": 28,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post(\"/users/register\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\nawait request(app).post(\"/users/register\").send({\n  username: \"novoUsuario1\",\n  password: \"senha123\",\n});",
                  "err": {},
                  "uuid": "dc48f14e-d898-4ad3-be78-b2f381eb4b81",
                  "parentUUID": "ffffe0c1-3da7-4d1b-a896-cd2d0560bb49",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"before each\" hook in \"POST /transfers\"",
                  "fullTitle": "Transfer Controller POST /transfers \"before each\" hook in \"POST /transfers\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(app).post(\"/users/login\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\ntoken = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "1a23d391-2d34-4f99-b7a9-39ae33da7ea0",
                  "parentUUID": "ffffe0c1-3da7-4d1b-a896-cd2d0560bb49",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Realizar uma transferência para usuário não cadastrado",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência para usuário não cadastrado",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"stopa\", to: \"alberto\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Usuário não encontrado\");",
                  "err": {},
                  "uuid": "c83b29d2-a751-4bf5-9414-138e02cc15b3",
                  "parentUUID": "ffffe0c1-3da7-4d1b-a896-cd2d0560bb49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência não informando os usuários de envio e recebimento",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência não informando os usuários de envio e recebimento",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"\", to: \"\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
                  "err": {},
                  "uuid": "eab9aa0f-8f04-408b-8e79-85983d94733f",
                  "parentUUID": "ffffe0c1-3da7-4d1b-a896-cd2d0560bb49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência com saldo insuficiente",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência com saldo insuficiente",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 20000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Saldo insuficiente\");",
                  "err": {},
                  "uuid": "fa2d80b0-2a87-4f61-934b-68dc0cad2ac2",
                  "parentUUID": "ffffe0c1-3da7-4d1b-a896-cd2d0560bb49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência com valor negativo",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência com valor negativo",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: -1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
                  "err": {},
                  "uuid": "98ee80f7-4452-4083-8389-3256a6d9a51e",
                  "parentUUID": "ffffe0c1-3da7-4d1b-a896-cd2d0560bb49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência com valor zero",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência com valor zero",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 0 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
                  "err": {},
                  "uuid": "0de24f61-7b53-4722-910a-c94ae0288bdc",
                  "parentUUID": "ffffe0c1-3da7-4d1b-a896-cd2d0560bb49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 401 se não enviar token",
                  "fullTitle": "Transfer Controller POST /transfers Deve retornar 401 se não enviar token",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(response.status).to.equal(401);\nexpect(response.body).to.have.property(\"error\");",
                  "err": {},
                  "uuid": "063f684b-e8d0-443c-9577-5804dd4b6cf4",
                  "parentUUID": "ffffe0c1-3da7-4d1b-a896-cd2d0560bb49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência autenticada",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência autenticada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.have.property(\"from\", \"novoUsuario\");\nexpect(response.body).to.have.property(\"to\", \"novoUsuario1\");\nexpect(response.body).to.have.property(\"amount\", 1000);\n// console.log(\"Token usado:\", token);\n// console.log(\"Response body:\", response.body);",
                  "err": {},
                  "uuid": "b8637925-e249-453e-8007-04f102ba85c7",
                  "parentUUID": "ffffe0c1-3da7-4d1b-a896-cd2d0560bb49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não permite transferência >= 5000 para não favorecido",
                  "fullTitle": "Transfer Controller POST /transfers Não permite transferência >= 5000 para não favorecido",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 5000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Transferências acima de R$ 5.000,00 só para favorecidos\"\n);\n// console.log(\"Response body:\", response.body);",
                  "err": {},
                  "uuid": "f3890efb-98b3-4508-942a-c6c8726fd796",
                  "parentUUID": "ffffe0c1-3da7-4d1b-a896-cd2d0560bb49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve listar as transferências realizadas em memória",
                  "fullTitle": "Transfer Controller POST /transfers Deve listar as transferências realizadas em memória",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const valores = [500, 1233, 1333];\nfor (const amount of valores) {\n  await request(app)\n    .post(\"/transfers\")\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount });\n}\nconst response = await request(app)\n  .get(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`);\n// console.log(\"Listagem de transferências:\", response.body);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");\nfor (const amount of valores) {\n  expect(\n    response.body.some(\n      (t) =>\n        t.from === \"novoUsuario\" &&\n        t.to === \"novoUsuario1\" &&\n        t.amount === amount\n    )\n  ).to.be.true;\n}",
                  "err": {},
                  "uuid": "30762bbd-0134-4447-9431-c0db8d4ac4fc",
                  "parentUUID": "ffffe0c1-3da7-4d1b-a896-cd2d0560bb49",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c83b29d2-a751-4bf5-9414-138e02cc15b3",
                "eab9aa0f-8f04-408b-8e79-85983d94733f",
                "fa2d80b0-2a87-4f61-934b-68dc0cad2ac2",
                "98ee80f7-4452-4083-8389-3256a6d9a51e",
                "0de24f61-7b53-4722-910a-c94ae0288bdc",
                "063f684b-e8d0-443c-9577-5804dd4b6cf4",
                "b8637925-e249-453e-8007-04f102ba85c7",
                "f3890efb-98b3-4508-942a-c6c8726fd796",
                "30762bbd-0134-4447-9431-c0db8d4ac4fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "f6ad9059-e784-4c8c-a15e-1ac4e85a6a0a",
          "title": "Transfer Controller - Unit",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\transferController.unit.test.js",
          "file": "\\test\\rest\\controller\\transferController.unit.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Transfer Controller - Unit\"",
              "fullTitle": "Transfer Controller - Unit \"before all\" hook in \"Transfer Controller - Unit\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post(\"/users/register\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\nawait request(app).post(\"/users/register\").send({\n  username: \"novoUsuario1\",\n  password: \"senha123\",\n});",
              "err": {},
              "uuid": "35c613e4-63ca-492c-8287-ffaeeaa3fbba",
              "parentUUID": "f6ad9059-e784-4c8c-a15e-1ac4e85a6a0a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Transfer Controller - Unit\"",
              "fullTitle": "Transfer Controller - Unit \"before each\" hook in \"Transfer Controller - Unit\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respostaLogin = await request(app).post(\"/users/login\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "b270a261-0cd3-4874-ac2a-649e670e9994",
              "parentUUID": "f6ad9059-e784-4c8c-a15e-1ac4e85a6a0a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Transfer Controller - Unit\"",
              "fullTitle": "Transfer Controller - Unit \"after each\" hook in \"Transfer Controller - Unit\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "41d038ac-bdae-4e95-b80e-3d694a911a27",
              "parentUUID": "f6ad9059-e784-4c8c-a15e-1ac4e85a6a0a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Deve retornar erro do service ao tentar transferir (stub)",
              "fullTitle": "Transfer Controller - Unit Deve retornar erro do service ao tentar transferir (stub)",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.stub(transferService, \"transfer\").throws(new Error(\"Erro simulado\"));\nconst response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Erro simulado\");",
              "err": {},
              "uuid": "f1dddd19-85a1-4fbf-842d-bc7d0bf08ffb",
              "parentUUID": "f6ad9059-e784-4c8c-a15e-1ac4e85a6a0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve chamar o service de transferência uma vez (spy)",
              "fullTitle": "Transfer Controller - Unit Deve chamar o service de transferência uma vez (spy)",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spy = sinon.spy(transferService, \"transfer\");\nawait request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(spy.calledOnce).to.be.true;\nspy.restore();",
              "err": {},
              "uuid": "782f1263-a413-4de2-b8e2-3f4cf4ea5936",
              "parentUUID": "f6ad9059-e784-4c8c-a15e-1ac4e85a6a0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve simular retorno de sucesso do service (stub)",
              "fullTitle": "Transfer Controller - Unit Deve simular retorno de sucesso do service (stub)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeTransfer = {\n  from: \"novoUsuario\",\n  to: \"novoUsuario1\",\n  amount: 123,\n  date: new Date(),\n};\nsinon.stub(transferService, \"transfer\").returns(fakeTransfer);\nconst response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 123 });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.include({\n  from: \"novoUsuario\",\n  to: \"novoUsuario1\",\n  amount: 123,\n});",
              "err": {},
              "uuid": "a4ffb1d8-d0a5-4b51-9c9a-c26829bcef4f",
              "parentUUID": "f6ad9059-e784-4c8c-a15e-1ac4e85a6a0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve usar mock para esperar chamada do service",
              "fullTitle": "Transfer Controller - Unit Deve usar mock para esperar chamada do service",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mock = sinon.mock(transferService);\nmock\n  .expects(\"transfer\")\n  .once()\n  .withArgs({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 555 });\nawait request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 555 });\nmock.verify();\nmock.restore();",
              "err": {},
              "uuid": "aabe3ee5-f8f8-414d-98b3-e79d3e0273da",
              "parentUUID": "f6ad9059-e784-4c8c-a15e-1ac4e85a6a0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não permite transferência >= 5000 para não favorecido (unit)",
              "fullTitle": "Transfer Controller - Unit Não permite transferência >= 5000 para não favorecido (unit)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon\n  .stub(transferService, \"transfer\")\n  .throws(\n    new Error(\"Transferências acima de R$ 5.000,00 só para favorecidos\")\n  );\nconst response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 5000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Transferências acima de R$ 5.000,00 só para favorecidos\"\n);\n// console.log(\"Response body:\", response.body);",
              "err": {},
              "uuid": "bcd888bd-ec9d-4d63-87e1-7c13271bb966",
              "parentUUID": "f6ad9059-e784-4c8c-a15e-1ac4e85a6a0a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f1dddd19-85a1-4fbf-842d-bc7d0bf08ffb",
            "782f1263-a413-4de2-b8e2-3f4cf4ea5936",
            "a4ffb1d8-d0a5-4b51-9c9a-c26829bcef4f",
            "aabe3ee5-f8f8-414d-98b3-e79d3e0273da",
            "bcd888bd-ec9d-4d63-87e1-7c13271bb966"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "4721f519-ab9a-4c8b-86fc-6a4bc3ce8ce2",
          "title": "User Controller",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
          "file": "\\test\\rest\\controller\\userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0b0713dd-691a-4204-ae0f-74dbb5ed8708",
              "title": "POST /users/register",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
              "file": "\\test\\rest\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve registrar um novo usuário com sucesso",
                  "fullTitle": "User Controller POST /users/register Deve registrar um novo usuário com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioTeste\", password: \"senha123\" });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.have.property(\"username\", \"usuarioTeste\");\nexpect(response.body).to.have.property(\"favorecidos\");",
                  "err": {},
                  "uuid": "6c5362d0-b3c2-4573-be61-c095788fe51c",
                  "parentUUID": "0b0713dd-691a-4204-ae0f-74dbb5ed8708",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve registrar usuário sem username ou password",
                  "fullTitle": "User Controller POST /users/register Não deve registrar usuário sem username ou password",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"\", password: \"\" });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Usuário e senha são obrigatórios\"\n);",
                  "err": {},
                  "uuid": "6183892b-516e-4ef3-8881-3868574f630c",
                  "parentUUID": "0b0713dd-691a-4204-ae0f-74dbb5ed8708",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve registrar usuário duplicado",
                  "fullTitle": "User Controller POST /users/register Não deve registrar usuário duplicado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioDuplicado\", password: \"senha123\" });\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioDuplicado\", password: \"senha123\" });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\");",
                  "err": {},
                  "uuid": "4e9a5d02-37a2-4365-8cf5-66e9fafdc219",
                  "parentUUID": "0b0713dd-691a-4204-ae0f-74dbb5ed8708",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c5362d0-b3c2-4573-be61-c095788fe51c",
                "6183892b-516e-4ef3-8881-3868574f630c",
                "4e9a5d02-37a2-4365-8cf5-66e9fafdc219"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "6c4f5626-53c4-4c49-973d-0d3684708071",
              "title": "POST /users/login",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
              "file": "\\test\\rest\\controller\\userController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /users/login\"",
                  "fullTitle": "User Controller POST /users/login \"before all\" hook in \"POST /users/login\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioLogin\", password: \"senha123\" });",
                  "err": {},
                  "uuid": "778cada4-0a63-41fd-b595-cf7edf145c51",
                  "parentUUID": "6c4f5626-53c4-4c49-973d-0d3684708071",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve fazer login com sucesso e retornar token",
                  "fullTitle": "User Controller POST /users/login Deve fazer login com sucesso e retornar token",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send({ username: \"usuarioLogin\", password: \"senha123\" });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property(\"token\");\nexpect(response.body).to.have.property(\"username\", \"usuarioLogin\");\nexpect(response.body).to.have.property(\"favorecidos\");\nexpect(response.body).to.have.property(\"saldo\");",
                  "err": {},
                  "uuid": "cb31b669-a43c-45c0-b8a4-5d9eba6f323d",
                  "parentUUID": "6c4f5626-53c4-4c49-973d-0d3684708071",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve logar com senha errada",
                  "fullTitle": "User Controller POST /users/login Não deve logar com senha errada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send({ username: \"usuarioLogin\", password: \"senhaErrada\" });\nexpect(response.status).to.equal(401);\nexpect(response.body).to.have.property(\"error\");",
                  "err": {},
                  "uuid": "224146af-511a-4e18-89f7-d5f24f583c8e",
                  "parentUUID": "6c4f5626-53c4-4c49-973d-0d3684708071",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve logar sem username ou password",
                  "fullTitle": "User Controller POST /users/login Não deve logar sem username ou password",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send({ username: \"\", password: \"\" });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Usuário e senha são obrigatórios\"\n);",
                  "err": {},
                  "uuid": "48e00060-ce18-4dbe-8d0f-9b684fdc8ad5",
                  "parentUUID": "6c4f5626-53c4-4c49-973d-0d3684708071",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb31b669-a43c-45c0-b8a4-5d9eba6f323d",
                "224146af-511a-4e18-89f7-d5f24f583c8e",
                "48e00060-ce18-4dbe-8d0f-9b684fdc8ad5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "913e2964-02c6-492e-9ec0-bf5552c819a2",
              "title": "GET /users",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
              "file": "\\test\\rest\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve listar todos os usuários cadastrados",
                  "fullTitle": "User Controller GET /users Deve listar todos os usuários cadastrados",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app).get(\"/users\");\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");\nexpect(response.body.length).to.be.greaterThan(0);",
                  "err": {},
                  "uuid": "b4161bc4-96ca-476f-9d5e-e72224d3f17e",
                  "parentUUID": "913e2964-02c6-492e-9ec0-bf5552c819a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4161bc4-96ca-476f-9d5e-e72224d3f17e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3c99633e-640a-42bf-8d5f-07f542e05ea8",
          "title": "Transfer Controller - External API",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\external\\transfer.external.test.js",
          "file": "\\test\\rest\\external\\transfer.external.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Transfer Controller - External API\"",
              "fullTitle": "Transfer Controller - External API \"before all\" hook in \"Transfer Controller - External API\"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Garante que os usuários existem\nawait api\n  .post(\"/users/register\")\n  .send({ username: \"novoUsuarioExt\", password: \"senha123\" });\nawait api\n  .post(\"/users/register\")\n  .send({ username: \"novoUsuario1Ext\", password: \"senha123\" });",
              "err": {},
              "uuid": "52decd08-6205-4ffb-8830-cd4916406bff",
              "parentUUID": "3c99633e-640a-42bf-8d5f-07f542e05ea8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Transfer Controller - External API\"",
              "fullTitle": "Transfer Controller - External API \"before each\" hook in \"Transfer Controller - External API\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Faz login para obter token\nconst respostaLogin = await api\n  .post(\"/users/login\")\n  .send({ username: \"novoUsuarioExt\", password: \"senha123\" });\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "86e507d5-acc1-4d1f-97bb-6f85fa1324c6",
              "parentUUID": "3c99633e-640a-42bf-8d5f-07f542e05ea8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Realizar uma transferência para usuário não cadastrado",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência para usuário não cadastrado",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"stopa\", to: \"alberto\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Usuário não encontrado\");",
              "err": {},
              "uuid": "ab75f0a2-aa03-4143-ac96-3d37baacc3bf",
              "parentUUID": "3c99633e-640a-42bf-8d5f-07f542e05ea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência não informando os usuários de envio e recebimento",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência não informando os usuários de envio e recebimento",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"\", to: \"\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
              "err": {},
              "uuid": "96f2acf5-21db-4f1d-a927-8f842df795da",
              "parentUUID": "3c99633e-640a-42bf-8d5f-07f542e05ea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência com saldo insuficiente",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência com saldo insuficiente",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 20000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Saldo insuficiente\");",
              "err": {},
              "uuid": "01ed4083-85ed-41b9-8c08-3a152fb58d8b",
              "parentUUID": "3c99633e-640a-42bf-8d5f-07f542e05ea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência com valor negativo",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência com valor negativo",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: -1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
              "err": {},
              "uuid": "a8322ff0-1b6c-4076-a5ad-b98ba70ff794",
              "parentUUID": "3c99633e-640a-42bf-8d5f-07f542e05ea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência com valor zero",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência com valor zero",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 0 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
              "err": {},
              "uuid": "efe0768f-793d-4ff7-ba4d-38f858cc7d35",
              "parentUUID": "3c99633e-640a-42bf-8d5f-07f542e05ea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar 401 se não enviar token",
              "fullTitle": "Transfer Controller - External API Deve retornar 401 se não enviar token",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 1000 });\nexpect(response.status).to.equal(401);\nexpect(response.body).to.have.property(\"error\");",
              "err": {},
              "uuid": "110de310-9ae5-4bf3-ae27-5466ad99b3ce",
              "parentUUID": "3c99633e-640a-42bf-8d5f-07f542e05ea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência autenticada",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência autenticada",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 10 });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.have.property(\"from\", \"novoUsuarioExt\");\nexpect(response.body).to.have.property(\"to\", \"novoUsuario1Ext\");\nexpect(response.body).to.have.property(\"amount\", 10);",
              "err": {},
              "uuid": "3e2b8204-9586-4c99-aa11-a90d03563d55",
              "parentUUID": "3c99633e-640a-42bf-8d5f-07f542e05ea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não permite transferência >= 5000 para não favorecido (external)",
              "fullTitle": "Transfer Controller - External API Não permite transferência >= 5000 para não favorecido (external)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario1Ext\", to: \"novoUsuarioExt\", amount: 5000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Transferências acima de R$ 5.000,00 só para favorecidos\"\n);\nconsole.log(\"Response body:\", response.body);",
              "err": {},
              "uuid": "f9776c08-7ab4-485e-84ca-eb5a00e602cd",
              "parentUUID": "3c99633e-640a-42bf-8d5f-07f542e05ea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar as transferências realizadas em memória",
              "fullTitle": "Transfer Controller - External API Deve listar as transferências realizadas em memória",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const valores = [500, 1233, 1333];\nfor (const amount of valores) {\n  await api\n    .post(\"/transfers\")\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount });\n}\nconst response = await api\n  .get(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`);\n// console.log(\"Listagem de transferências:\", response.body);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");\nfor (const amount of valores) {\n  expect(\n    response.body.some(\n      (t) =>\n        t.from === \"novoUsuarioExt\" &&\n        t.to === \"novoUsuario1Ext\" &&\n        t.amount === amount\n    )\n  ).to.be.true;\n}",
              "err": {},
              "uuid": "f0d4f4cc-036b-4829-9ae1-dd765e08f7ae",
              "parentUUID": "3c99633e-640a-42bf-8d5f-07f542e05ea8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ab75f0a2-aa03-4143-ac96-3d37baacc3bf",
            "96f2acf5-21db-4f1d-a927-8f842df795da",
            "01ed4083-85ed-41b9-8c08-3a152fb58d8b",
            "a8322ff0-1b6c-4076-a5ad-b98ba70ff794",
            "efe0768f-793d-4ff7-ba4d-38f858cc7d35",
            "110de310-9ae5-4bf3-ae27-5466ad99b3ce",
            "3e2b8204-9586-4c99-aa11-a90d03563d55",
            "f9776c08-7ab4-485e-84ca-eb5a00e602cd",
            "f0d4f4cc-036b-4829-9ae1-dd765e08f7ae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "df4e451b-d822-4418-a059-b87a3bcc27ab",
          "title": "User Controller - External API",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\external\\user.external.test.js",
          "file": "\\test\\rest\\external\\user.external.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve registrar um novo usuário via API externa",
              "fullTitle": "User Controller - External API Deve registrar um novo usuário via API externa",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/users/register\")\n  .send({ username: \"usuarioExt\", password: \"senha123\" });\nexpect([201, 400]).to.include(response.status); // 400 se já existir",
              "err": {},
              "uuid": "7b0f959a-21b2-4664-89c3-19a34980cb99",
              "parentUUID": "df4e451b-d822-4418-a059-b87a3bcc27ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve fazer login via API externa",
              "fullTitle": "User Controller - External API Deve fazer login via API externa",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/users/login\")\n  .send({ username: \"usuarioExt\", password: \"senha123\" });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property(\"token\");",
              "err": {},
              "uuid": "3a9b1b28-abf1-43cb-af87-0181692191d4",
              "parentUUID": "df4e451b-d822-4418-a059-b87a3bcc27ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários via API externa",
              "fullTitle": "User Controller - External API Deve listar usuários via API externa",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api.get(\"/users\");\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");",
              "err": {},
              "uuid": "56e340b5-a61c-4c85-8091-6136e8b90882",
              "parentUUID": "df4e451b-d822-4418-a059-b87a3bcc27ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7b0f959a-21b2-4664-89c3-19a34980cb99",
            "3a9b1b28-abf1-43cb-af87-0181692191d4",
            "56e340b5-a61c-4c85-8091-6136e8b90882"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}