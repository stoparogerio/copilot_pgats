{
  "stats": {
    "suites": 9,
    "tests": 33,
    "passes": 33,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-21T16:47:55.593Z",
    "end": "2025-09-21T16:47:55.899Z",
    "duration": 306,
    "testsRegistered": 33,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3b3513a0-ea74-4d2e-b870-15eb513f835f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f9542ea1-9021-414d-bbe8-2cf9d2eb4893",
          "title": "Transfer Controller",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\transferController.test.js",
          "file": "\\test\\rest\\controller\\transferController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f8a5ada5-4763-45c1-b1f7-a2788c13b3f5",
              "title": "POST /transfers",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\transferController.test.js",
              "file": "\\test\\rest\\controller\\transferController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /transfers\"",
                  "fullTitle": "Transfer Controller POST /transfers \"before all\" hook in \"POST /transfers\"",
                  "timedOut": false,
                  "duration": 27,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post(\"/users/register\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\nawait request(app).post(\"/users/register\").send({\n  username: \"novoUsuario1\",\n  password: \"senha123\",\n});",
                  "err": {},
                  "uuid": "3be48fc3-7be4-409c-9405-61f0cfd265c8",
                  "parentUUID": "f8a5ada5-4763-45c1-b1f7-a2788c13b3f5",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"before each\" hook in \"POST /transfers\"",
                  "fullTitle": "Transfer Controller POST /transfers \"before each\" hook in \"POST /transfers\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(app).post(\"/users/login\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\ntoken = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "0873e96c-eef2-4dee-bc7b-a1a053c3a26c",
                  "parentUUID": "f8a5ada5-4763-45c1-b1f7-a2788c13b3f5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Realizar uma transferência para usuário não cadastrado",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência para usuário não cadastrado",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"stopa\", to: \"alberto\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Usuário não encontrado\");",
                  "err": {},
                  "uuid": "a40bb6c2-8638-404e-9d2d-7edc0e8740dc",
                  "parentUUID": "f8a5ada5-4763-45c1-b1f7-a2788c13b3f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência não informando os usuários de envio e recebimento",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência não informando os usuários de envio e recebimento",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"\", to: \"\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
                  "err": {},
                  "uuid": "8bb59495-2b92-447c-9b77-7236703f2c72",
                  "parentUUID": "f8a5ada5-4763-45c1-b1f7-a2788c13b3f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência com saldo insuficiente",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência com saldo insuficiente",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 20000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Saldo insuficiente\");",
                  "err": {},
                  "uuid": "9b12678d-d9af-425a-856a-83917b053b27",
                  "parentUUID": "f8a5ada5-4763-45c1-b1f7-a2788c13b3f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência com valor negativo",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência com valor negativo",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: -1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
                  "err": {},
                  "uuid": "1f8c6401-d7ab-454f-9876-c15e12223460",
                  "parentUUID": "f8a5ada5-4763-45c1-b1f7-a2788c13b3f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência com valor zero",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência com valor zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 0 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
                  "err": {},
                  "uuid": "4e7996d6-75d9-452a-880a-9355f5436b16",
                  "parentUUID": "f8a5ada5-4763-45c1-b1f7-a2788c13b3f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 401 se não enviar token",
                  "fullTitle": "Transfer Controller POST /transfers Deve retornar 401 se não enviar token",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(response.status).to.equal(401);\nexpect(response.body).to.have.property(\"error\");",
                  "err": {},
                  "uuid": "fe29ff0c-1ce4-4034-bb72-09ad925fa78e",
                  "parentUUID": "f8a5ada5-4763-45c1-b1f7-a2788c13b3f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência autenticada",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência autenticada",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.have.property(\"from\", \"novoUsuario\");\nexpect(response.body).to.have.property(\"to\", \"novoUsuario1\");\nexpect(response.body).to.have.property(\"amount\", 1000);\nconsole.log(\"Token usado:\", token);\nconsole.log(\"Response body:\", response.body);",
                  "err": {},
                  "uuid": "5e696d3b-5c4a-48ba-8c3b-147b846661cf",
                  "parentUUID": "f8a5ada5-4763-45c1-b1f7-a2788c13b3f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não permite transferência >= 5000 para não favorecido",
                  "fullTitle": "Transfer Controller POST /transfers Não permite transferência >= 5000 para não favorecido",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 5000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Transferências acima de R$ 5.000,00 só para favorecidos\"\n);",
                  "err": {},
                  "uuid": "fab1acca-badb-4bc0-8f3f-3e61183fafa3",
                  "parentUUID": "f8a5ada5-4763-45c1-b1f7-a2788c13b3f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve listar as transferências realizadas em memória",
                  "fullTitle": "Transfer Controller POST /transfers Deve listar as transferências realizadas em memória",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const valores = [500, 1233, 1333];\nfor (const amount of valores) {\n  await request(app)\n    .post(\"/transfers\")\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount });\n}\nconst response = await request(app)\n  .get(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`);\nconsole.log(\"Listagem de transferências:\", response.body);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");\nfor (const amount of valores) {\n  expect(\n    response.body.some(\n      (t) =>\n        t.from === \"novoUsuario\" &&\n        t.to === \"novoUsuario1\" &&\n        t.amount === amount\n    )\n  ).to.be.true;\n}",
                  "err": {},
                  "uuid": "5f318214-948d-4941-96ba-6c93fa936c7d",
                  "parentUUID": "f8a5ada5-4763-45c1-b1f7-a2788c13b3f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a40bb6c2-8638-404e-9d2d-7edc0e8740dc",
                "8bb59495-2b92-447c-9b77-7236703f2c72",
                "9b12678d-d9af-425a-856a-83917b053b27",
                "1f8c6401-d7ab-454f-9876-c15e12223460",
                "4e7996d6-75d9-452a-880a-9355f5436b16",
                "fe29ff0c-1ce4-4034-bb72-09ad925fa78e",
                "5e696d3b-5c4a-48ba-8c3b-147b846661cf",
                "fab1acca-badb-4bc0-8f3f-3e61183fafa3",
                "5f318214-948d-4941-96ba-6c93fa936c7d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "45d8a6c5-236a-40f0-9852-0fead16efabd",
          "title": "Transfer Controller - Unit",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\transferController.unit.test.js",
          "file": "\\test\\rest\\controller\\transferController.unit.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Transfer Controller - Unit\"",
              "fullTitle": "Transfer Controller - Unit \"before all\" hook in \"Transfer Controller - Unit\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post(\"/users/register\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\nawait request(app).post(\"/users/register\").send({\n  username: \"novoUsuario1\",\n  password: \"senha123\",\n});",
              "err": {},
              "uuid": "d4563018-9382-465f-a9b8-85c59dddf620",
              "parentUUID": "45d8a6c5-236a-40f0-9852-0fead16efabd",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Transfer Controller - Unit\"",
              "fullTitle": "Transfer Controller - Unit \"before each\" hook in \"Transfer Controller - Unit\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respostaLogin = await request(app).post(\"/users/login\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "497cce69-7f8d-4902-9e23-07f64f788ffd",
              "parentUUID": "45d8a6c5-236a-40f0-9852-0fead16efabd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Transfer Controller - Unit\"",
              "fullTitle": "Transfer Controller - Unit \"after each\" hook in \"Transfer Controller - Unit\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "20ab5b92-276d-4cb6-a94f-4373a8dd0bb7",
              "parentUUID": "45d8a6c5-236a-40f0-9852-0fead16efabd",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Deve retornar erro do service ao tentar transferir (stub)",
              "fullTitle": "Transfer Controller - Unit Deve retornar erro do service ao tentar transferir (stub)",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.stub(transferService, \"transfer\").throws(new Error(\"Erro simulado\"));\nconst response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Erro simulado\");",
              "err": {},
              "uuid": "640d191d-2217-49e4-a30e-9c5d248303dd",
              "parentUUID": "45d8a6c5-236a-40f0-9852-0fead16efabd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve chamar o service de transferência uma vez (spy)",
              "fullTitle": "Transfer Controller - Unit Deve chamar o service de transferência uma vez (spy)",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spy = sinon.spy(transferService, \"transfer\");\nawait request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(spy.calledOnce).to.be.true;\nspy.restore();",
              "err": {},
              "uuid": "e1a4c22e-d7e5-4fcb-8a0a-2d1388e5a5f8",
              "parentUUID": "45d8a6c5-236a-40f0-9852-0fead16efabd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve simular retorno de sucesso do service (stub)",
              "fullTitle": "Transfer Controller - Unit Deve simular retorno de sucesso do service (stub)",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeTransfer = {\n  from: \"novoUsuario\",\n  to: \"novoUsuario1\",\n  amount: 123,\n  date: new Date(),\n};\nsinon.stub(transferService, \"transfer\").returns(fakeTransfer);\nconst response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 123 });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.include({\n  from: \"novoUsuario\",\n  to: \"novoUsuario1\",\n  amount: 123,\n});",
              "err": {},
              "uuid": "d2952928-4f64-429b-b746-dd3ba278f7bc",
              "parentUUID": "45d8a6c5-236a-40f0-9852-0fead16efabd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve usar mock para esperar chamada do service",
              "fullTitle": "Transfer Controller - Unit Deve usar mock para esperar chamada do service",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mock = sinon.mock(transferService);\nmock\n  .expects(\"transfer\")\n  .once()\n  .withArgs({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 555 });\nawait request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 555 });\nmock.verify();\nmock.restore();",
              "err": {},
              "uuid": "8090bd58-69a2-455b-9c97-845ba6537dd5",
              "parentUUID": "45d8a6c5-236a-40f0-9852-0fead16efabd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não permite transferência >= 5000 para não favorecido (unit)",
              "fullTitle": "Transfer Controller - Unit Não permite transferência >= 5000 para não favorecido (unit)",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.stub(transferService, \"transfer\").throws(new Error(\"Transferências acima de R$ 5.000,00 só para favorecidos\"));\nconst response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 5000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Transferências acima de R$ 5.000,00 só para favorecidos\"\n);",
              "err": {},
              "uuid": "e86cf115-f74f-49e8-9091-6af5c0894bb0",
              "parentUUID": "45d8a6c5-236a-40f0-9852-0fead16efabd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "640d191d-2217-49e4-a30e-9c5d248303dd",
            "e1a4c22e-d7e5-4fcb-8a0a-2d1388e5a5f8",
            "d2952928-4f64-429b-b746-dd3ba278f7bc",
            "8090bd58-69a2-455b-9c97-845ba6537dd5",
            "e86cf115-f74f-49e8-9091-6af5c0894bb0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "abd2f4a1-b08a-490b-9680-68cdebd1c044",
          "title": "User Controller",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
          "file": "\\test\\rest\\controller\\userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "79be9827-bff0-463f-a912-08a18d3c4539",
              "title": "POST /users/register",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
              "file": "\\test\\rest\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve registrar um novo usuário com sucesso",
                  "fullTitle": "User Controller POST /users/register Deve registrar um novo usuário com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioTeste\", password: \"senha123\" });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.have.property(\"username\", \"usuarioTeste\");\nexpect(response.body).to.have.property(\"favorecidos\");",
                  "err": {},
                  "uuid": "da09f028-c975-4c4b-81cf-028095647662",
                  "parentUUID": "79be9827-bff0-463f-a912-08a18d3c4539",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve registrar usuário sem username ou password",
                  "fullTitle": "User Controller POST /users/register Não deve registrar usuário sem username ou password",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"\", password: \"\" });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Usuário e senha são obrigatórios\"\n);",
                  "err": {},
                  "uuid": "6613f6e8-730a-48b7-8131-e354cb267dbc",
                  "parentUUID": "79be9827-bff0-463f-a912-08a18d3c4539",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve registrar usuário duplicado",
                  "fullTitle": "User Controller POST /users/register Não deve registrar usuário duplicado",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioDuplicado\", password: \"senha123\" });\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioDuplicado\", password: \"senha123\" });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\");",
                  "err": {},
                  "uuid": "76632876-069f-4131-b6d3-176bb08d9785",
                  "parentUUID": "79be9827-bff0-463f-a912-08a18d3c4539",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da09f028-c975-4c4b-81cf-028095647662",
                "6613f6e8-730a-48b7-8131-e354cb267dbc",
                "76632876-069f-4131-b6d3-176bb08d9785"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "25aea2eb-ce1b-4852-9f61-78bd31fb2941",
              "title": "POST /users/login",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
              "file": "\\test\\rest\\controller\\userController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /users/login\"",
                  "fullTitle": "User Controller POST /users/login \"before all\" hook in \"POST /users/login\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioLogin\", password: \"senha123\" });",
                  "err": {},
                  "uuid": "b6a34a18-6fe6-4a36-87f3-b518a5dc64c9",
                  "parentUUID": "25aea2eb-ce1b-4852-9f61-78bd31fb2941",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve fazer login com sucesso e retornar token",
                  "fullTitle": "User Controller POST /users/login Deve fazer login com sucesso e retornar token",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send({ username: \"usuarioLogin\", password: \"senha123\" });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property(\"token\");\nexpect(response.body).to.have.property(\"username\", \"usuarioLogin\");\nexpect(response.body).to.have.property(\"favorecidos\");\nexpect(response.body).to.have.property(\"saldo\");",
                  "err": {},
                  "uuid": "60032678-66a6-41f7-b13e-f1742fef7058",
                  "parentUUID": "25aea2eb-ce1b-4852-9f61-78bd31fb2941",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve logar com senha errada",
                  "fullTitle": "User Controller POST /users/login Não deve logar com senha errada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send({ username: \"usuarioLogin\", password: \"senhaErrada\" });\nexpect(response.status).to.equal(401);\nexpect(response.body).to.have.property(\"error\");",
                  "err": {},
                  "uuid": "aaea19aa-8e9b-4fee-addf-57eda1ab25ed",
                  "parentUUID": "25aea2eb-ce1b-4852-9f61-78bd31fb2941",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve logar sem username ou password",
                  "fullTitle": "User Controller POST /users/login Não deve logar sem username ou password",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send({ username: \"\", password: \"\" });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Usuário e senha são obrigatórios\"\n);",
                  "err": {},
                  "uuid": "2863f3a5-8670-43ac-9521-0946b157f472",
                  "parentUUID": "25aea2eb-ce1b-4852-9f61-78bd31fb2941",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60032678-66a6-41f7-b13e-f1742fef7058",
                "aaea19aa-8e9b-4fee-addf-57eda1ab25ed",
                "2863f3a5-8670-43ac-9521-0946b157f472"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "292848bf-2701-493b-8a6e-84854d9a0137",
              "title": "GET /users",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
              "file": "\\test\\rest\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve listar todos os usuários cadastrados",
                  "fullTitle": "User Controller GET /users Deve listar todos os usuários cadastrados",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app).get(\"/users\");\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");\nexpect(response.body.length).to.be.greaterThan(0);",
                  "err": {},
                  "uuid": "b9a49d9b-c042-4afb-8a76-c83510c884ff",
                  "parentUUID": "292848bf-2701-493b-8a6e-84854d9a0137",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9a49d9b-c042-4afb-8a76-c83510c884ff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ee946de2-64e6-430c-9cd8-9c1c5c602340",
          "title": "Transfer Controller - External API",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\external\\transfer.external.test.js",
          "file": "\\test\\rest\\external\\transfer.external.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Transfer Controller - External API\"",
              "fullTitle": "Transfer Controller - External API \"before all\" hook in \"Transfer Controller - External API\"",
              "timedOut": false,
              "duration": 37,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Garante que os usuários existem\nawait api\n  .post(\"/users/register\")\n  .send({ username: \"novoUsuarioExt\", password: \"senha123\" });\nawait api\n  .post(\"/users/register\")\n  .send({ username: \"novoUsuario1Ext\", password: \"senha123\" });",
              "err": {},
              "uuid": "33d8a6bd-1183-41fa-b433-2953e58edc0d",
              "parentUUID": "ee946de2-64e6-430c-9cd8-9c1c5c602340",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Transfer Controller - External API\"",
              "fullTitle": "Transfer Controller - External API \"before each\" hook in \"Transfer Controller - External API\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Faz login para obter token\nconst respostaLogin = await api\n  .post(\"/users/login\")\n  .send({ username: \"novoUsuarioExt\", password: \"senha123\" });\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "7df399db-39e2-469c-82a2-c8d9090921e0",
              "parentUUID": "ee946de2-64e6-430c-9cd8-9c1c5c602340",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Realizar uma transferência para usuário não cadastrado",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência para usuário não cadastrado",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"stopa\", to: \"alberto\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Usuário não encontrado\");",
              "err": {},
              "uuid": "ddd771a5-3aec-4535-9f63-5642ffe3a60a",
              "parentUUID": "ee946de2-64e6-430c-9cd8-9c1c5c602340",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência não informando os usuários de envio e recebimento",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência não informando os usuários de envio e recebimento",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"\", to: \"\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
              "err": {},
              "uuid": "7c0d1ca0-d34b-41ba-8079-d06dd0496bd7",
              "parentUUID": "ee946de2-64e6-430c-9cd8-9c1c5c602340",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência com saldo insuficiente",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência com saldo insuficiente",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 20000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Saldo insuficiente\");",
              "err": {},
              "uuid": "944cab37-c8b6-421a-9f26-5458b4f76727",
              "parentUUID": "ee946de2-64e6-430c-9cd8-9c1c5c602340",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência com valor negativo",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência com valor negativo",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: -1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
              "err": {},
              "uuid": "eeb6bc6f-2537-4e02-82a0-559b23ba0c37",
              "parentUUID": "ee946de2-64e6-430c-9cd8-9c1c5c602340",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência com valor zero",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência com valor zero",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 0 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
              "err": {},
              "uuid": "bde38a5c-4a52-479c-8a77-c325281d7fb0",
              "parentUUID": "ee946de2-64e6-430c-9cd8-9c1c5c602340",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar 401 se não enviar token",
              "fullTitle": "Transfer Controller - External API Deve retornar 401 se não enviar token",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 1000 });\nexpect(response.status).to.equal(401);\nexpect(response.body).to.have.property(\"error\");",
              "err": {},
              "uuid": "dc46bb51-6530-4352-a8ee-4e8f67e71b92",
              "parentUUID": "ee946de2-64e6-430c-9cd8-9c1c5c602340",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência autenticada",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência autenticada",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 1000 });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.have.property(\"from\", \"novoUsuarioExt\");\nexpect(response.body).to.have.property(\"to\", \"novoUsuario1Ext\");\nexpect(response.body).to.have.property(\"amount\", 1000);",
              "err": {},
              "uuid": "d1bbbe7f-345d-4774-b13f-e0f070d0de88",
              "parentUUID": "ee946de2-64e6-430c-9cd8-9c1c5c602340",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não permite transferência >= 5000 para não favorecido (external)",
              "fullTitle": "Transfer Controller - External API Não permite transferência >= 5000 para não favorecido (external)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 5000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Transferências acima de R$ 5.000,00 só para favorecidos\"\n);",
              "err": {},
              "uuid": "64e8bac8-eb63-4ab4-8bbc-cc86872af791",
              "parentUUID": "ee946de2-64e6-430c-9cd8-9c1c5c602340",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar as transferências realizadas em memória",
              "fullTitle": "Transfer Controller - External API Deve listar as transferências realizadas em memória",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const valores = [500, 1233, 1333];\nfor (const amount of valores) {\n  await api\n    .post(\"/transfers\")\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount });\n}\nconst response = await api\n  .get(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`);\nconsole.log(\"Listagem de transferências:\", response.body);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");\nfor (const amount of valores) {\n  expect(\n    response.body.some(\n      (t) =>\n        t.from === \"novoUsuarioExt\" &&\n        t.to === \"novoUsuario1Ext\" &&\n        t.amount === amount\n    )\n  ).to.be.true;\n}",
              "err": {},
              "uuid": "cdd38903-9cc8-4114-b873-5b010402d14b",
              "parentUUID": "ee946de2-64e6-430c-9cd8-9c1c5c602340",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ddd771a5-3aec-4535-9f63-5642ffe3a60a",
            "7c0d1ca0-d34b-41ba-8079-d06dd0496bd7",
            "944cab37-c8b6-421a-9f26-5458b4f76727",
            "eeb6bc6f-2537-4e02-82a0-559b23ba0c37",
            "bde38a5c-4a52-479c-8a77-c325281d7fb0",
            "dc46bb51-6530-4352-a8ee-4e8f67e71b92",
            "d1bbbe7f-345d-4774-b13f-e0f070d0de88",
            "64e8bac8-eb63-4ab4-8bbc-cc86872af791",
            "cdd38903-9cc8-4114-b873-5b010402d14b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 32,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0619ea7a-63eb-46d6-853e-c05a49439232",
          "title": "User Controller - External API",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\external\\user.external.test.js",
          "file": "\\test\\rest\\external\\user.external.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve registrar um novo usuário via API externa",
              "fullTitle": "User Controller - External API Deve registrar um novo usuário via API externa",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/users/register\")\n  .send({ username: \"usuarioExt\", password: \"senha123\" });\nexpect([201, 400]).to.include(response.status); // 400 se já existir",
              "err": {},
              "uuid": "afab8b55-6ad6-463d-8a00-b3780ab8345b",
              "parentUUID": "0619ea7a-63eb-46d6-853e-c05a49439232",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve fazer login via API externa",
              "fullTitle": "User Controller - External API Deve fazer login via API externa",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/users/login\")\n  .send({ username: \"usuarioExt\", password: \"senha123\" });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property(\"token\");",
              "err": {},
              "uuid": "9ae4c812-7ca2-465f-b7a1-c327fd2036b2",
              "parentUUID": "0619ea7a-63eb-46d6-853e-c05a49439232",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários via API externa",
              "fullTitle": "User Controller - External API Deve listar usuários via API externa",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api.get(\"/users\");\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");",
              "err": {},
              "uuid": "61e3e5ef-b961-4aa6-a2d0-5e6ea5458ec3",
              "parentUUID": "0619ea7a-63eb-46d6-853e-c05a49439232",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "afab8b55-6ad6-463d-8a00-b3780ab8345b",
            "9ae4c812-7ca2-465f-b7a1-c327fd2036b2",
            "61e3e5ef-b961-4aa6-a2d0-5e6ea5458ec3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}