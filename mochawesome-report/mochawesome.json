{
  "stats": {
    "suites": 9,
    "tests": 33,
    "passes": 33,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-21T19:15:50.116Z",
    "end": "2025-09-21T19:15:50.383Z",
    "duration": 267,
    "testsRegistered": 33,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4f26cd25-5d8e-4303-ad07-debfa5e8346b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "21c2c2fc-c781-4ce2-ba6f-2e0fa14d1166",
          "title": "Transfer Controller",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\transferController.test.js",
          "file": "\\test\\rest\\controller\\transferController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "695c26a8-ee4f-40ac-9708-241452f215e2",
              "title": "POST /transfers",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\transferController.test.js",
              "file": "\\test\\rest\\controller\\transferController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /transfers\"",
                  "fullTitle": "Transfer Controller POST /transfers \"before all\" hook in \"POST /transfers\"",
                  "timedOut": false,
                  "duration": 29,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post(\"/users/register\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\nawait request(app).post(\"/users/register\").send({\n  username: \"novoUsuario1\",\n  password: \"senha123\",\n});",
                  "err": {},
                  "uuid": "73a46ace-6365-48c8-8042-c308bee05f53",
                  "parentUUID": "695c26a8-ee4f-40ac-9708-241452f215e2",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"before each\" hook in \"POST /transfers\"",
                  "fullTitle": "Transfer Controller POST /transfers \"before each\" hook in \"POST /transfers\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(app).post(\"/users/login\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\ntoken = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "26b5739f-42c9-4483-b2f9-f14e4d66ad32",
                  "parentUUID": "695c26a8-ee4f-40ac-9708-241452f215e2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Realizar uma transferência para usuário não cadastrado",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência para usuário não cadastrado",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"stopa\", to: \"alberto\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Usuário não encontrado\");",
                  "err": {},
                  "uuid": "68e766d5-3f69-4ebb-8574-e06a58261716",
                  "parentUUID": "695c26a8-ee4f-40ac-9708-241452f215e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência não informando os usuários de envio e recebimento",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência não informando os usuários de envio e recebimento",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"\", to: \"\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
                  "err": {},
                  "uuid": "3d92b60e-f166-4a5a-bca2-b2dac76dc3c4",
                  "parentUUID": "695c26a8-ee4f-40ac-9708-241452f215e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência com saldo insuficiente",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência com saldo insuficiente",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 20000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Saldo insuficiente\");",
                  "err": {},
                  "uuid": "840a668d-140c-4205-ba98-ddcb774af5c7",
                  "parentUUID": "695c26a8-ee4f-40ac-9708-241452f215e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência com valor negativo",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência com valor negativo",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: -1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
                  "err": {},
                  "uuid": "4f2f285a-fd02-4895-8012-3b3b44b2bdc7",
                  "parentUUID": "695c26a8-ee4f-40ac-9708-241452f215e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência com valor zero",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência com valor zero",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 0 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
                  "err": {},
                  "uuid": "7dc483f5-6703-4d9b-b932-5ea0675bba70",
                  "parentUUID": "695c26a8-ee4f-40ac-9708-241452f215e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 401 se não enviar token",
                  "fullTitle": "Transfer Controller POST /transfers Deve retornar 401 se não enviar token",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(response.status).to.equal(401);\nexpect(response.body).to.have.property(\"error\");",
                  "err": {},
                  "uuid": "de20dc5d-50e3-4ef6-b56b-559b262f7ab1",
                  "parentUUID": "695c26a8-ee4f-40ac-9708-241452f215e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência autenticada",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência autenticada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.have.property(\"from\", \"novoUsuario\");\nexpect(response.body).to.have.property(\"to\", \"novoUsuario1\");\nexpect(response.body).to.have.property(\"amount\", 1000);\n// console.log(\"Token usado:\", token);\n// console.log(\"Response body:\", response.body);",
                  "err": {},
                  "uuid": "e639d9b1-2476-4f9c-8eeb-d1e75762a312",
                  "parentUUID": "695c26a8-ee4f-40ac-9708-241452f215e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não permite transferência >= 5000 para não favorecido",
                  "fullTitle": "Transfer Controller POST /transfers Não permite transferência >= 5000 para não favorecido",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 5000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Transferências acima de R$ 5.000,00 só para favorecidos\"\n);\n// console.log(\"Response body:\", response.body);",
                  "err": {},
                  "uuid": "b142cade-2f6d-4df5-87c3-685f7943f75b",
                  "parentUUID": "695c26a8-ee4f-40ac-9708-241452f215e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve listar as transferências realizadas em memória",
                  "fullTitle": "Transfer Controller POST /transfers Deve listar as transferências realizadas em memória",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const valores = [500, 1233, 1333];\nfor (const amount of valores) {\n  await request(app)\n    .post(\"/transfers\")\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount });\n}\nconst response = await request(app)\n  .get(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`);\n// console.log(\"Listagem de transferências:\", response.body);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");\nfor (const amount of valores) {\n  expect(\n    response.body.some(\n      (t) =>\n        t.from === \"novoUsuario\" &&\n        t.to === \"novoUsuario1\" &&\n        t.amount === amount\n    )\n  ).to.be.true;\n}",
                  "err": {},
                  "uuid": "d359bc66-eb71-4284-b855-3a5f6ad4f18c",
                  "parentUUID": "695c26a8-ee4f-40ac-9708-241452f215e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68e766d5-3f69-4ebb-8574-e06a58261716",
                "3d92b60e-f166-4a5a-bca2-b2dac76dc3c4",
                "840a668d-140c-4205-ba98-ddcb774af5c7",
                "4f2f285a-fd02-4895-8012-3b3b44b2bdc7",
                "7dc483f5-6703-4d9b-b932-5ea0675bba70",
                "de20dc5d-50e3-4ef6-b56b-559b262f7ab1",
                "e639d9b1-2476-4f9c-8eeb-d1e75762a312",
                "b142cade-2f6d-4df5-87c3-685f7943f75b",
                "d359bc66-eb71-4284-b855-3a5f6ad4f18c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 46,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "f2c5dd66-793c-40b6-b340-53c21209c548",
          "title": "Transfer Controller - Unit",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\transferController.unit.test.js",
          "file": "\\test\\rest\\controller\\transferController.unit.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Transfer Controller - Unit\"",
              "fullTitle": "Transfer Controller - Unit \"before all\" hook in \"Transfer Controller - Unit\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post(\"/users/register\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\nawait request(app).post(\"/users/register\").send({\n  username: \"novoUsuario1\",\n  password: \"senha123\",\n});",
              "err": {},
              "uuid": "a08097c3-9b6c-4314-8366-4731a6c4954d",
              "parentUUID": "f2c5dd66-793c-40b6-b340-53c21209c548",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Transfer Controller - Unit\"",
              "fullTitle": "Transfer Controller - Unit \"before each\" hook in \"Transfer Controller - Unit\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respostaLogin = await request(app).post(\"/users/login\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "2f3ac98c-44f2-48be-82ca-5bb539d3a2c7",
              "parentUUID": "f2c5dd66-793c-40b6-b340-53c21209c548",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Transfer Controller - Unit\"",
              "fullTitle": "Transfer Controller - Unit \"after each\" hook in \"Transfer Controller - Unit\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "867613cb-a24e-47eb-b7cc-1b105df7e6da",
              "parentUUID": "f2c5dd66-793c-40b6-b340-53c21209c548",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Deve retornar erro do service ao tentar transferir (stub)",
              "fullTitle": "Transfer Controller - Unit Deve retornar erro do service ao tentar transferir (stub)",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.stub(transferService, \"transfer\").throws(new Error(\"Erro simulado\"));\nconst response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Erro simulado\");",
              "err": {},
              "uuid": "f7a2f8dd-f025-4752-8899-160916d9f868",
              "parentUUID": "f2c5dd66-793c-40b6-b340-53c21209c548",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve chamar o service de transferência uma vez (spy)",
              "fullTitle": "Transfer Controller - Unit Deve chamar o service de transferência uma vez (spy)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spy = sinon.spy(transferService, \"transfer\");\nawait request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(spy.calledOnce).to.be.true;\nspy.restore();",
              "err": {},
              "uuid": "6b9a5825-1c63-4809-b8a6-b1ce039a4510",
              "parentUUID": "f2c5dd66-793c-40b6-b340-53c21209c548",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve simular retorno de sucesso do service (stub)",
              "fullTitle": "Transfer Controller - Unit Deve simular retorno de sucesso do service (stub)",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeTransfer = {\n  from: \"novoUsuario\",\n  to: \"novoUsuario1\",\n  amount: 123,\n  date: new Date(),\n};\nsinon.stub(transferService, \"transfer\").returns(fakeTransfer);\nconst response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 123 });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.include({\n  from: \"novoUsuario\",\n  to: \"novoUsuario1\",\n  amount: 123,\n});",
              "err": {},
              "uuid": "987d6fdc-bd4a-4203-9c73-387d2778c325",
              "parentUUID": "f2c5dd66-793c-40b6-b340-53c21209c548",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve usar mock para esperar chamada do service",
              "fullTitle": "Transfer Controller - Unit Deve usar mock para esperar chamada do service",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mock = sinon.mock(transferService);\nmock\n  .expects(\"transfer\")\n  .once()\n  .withArgs({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 555 });\nawait request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 555 });\nmock.verify();\nmock.restore();",
              "err": {},
              "uuid": "0cd08a7e-2032-489e-8e94-9a5bbdf8f4fd",
              "parentUUID": "f2c5dd66-793c-40b6-b340-53c21209c548",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não permite transferência >= 5000 para não favorecido (unit)",
              "fullTitle": "Transfer Controller - Unit Não permite transferência >= 5000 para não favorecido (unit)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon\n  .stub(transferService, \"transfer\")\n  .throws(\n    new Error(\"Transferências acima de R$ 5.000,00 só para favorecidos\")\n  );\nconst response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 5000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Transferências acima de R$ 5.000,00 só para favorecidos\"\n);\n// console.log(\"Response body:\", response.body);",
              "err": {},
              "uuid": "be3f2187-1ac4-46fe-9a62-296a088e689f",
              "parentUUID": "f2c5dd66-793c-40b6-b340-53c21209c548",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f7a2f8dd-f025-4752-8899-160916d9f868",
            "6b9a5825-1c63-4809-b8a6-b1ce039a4510",
            "987d6fdc-bd4a-4203-9c73-387d2778c325",
            "0cd08a7e-2032-489e-8e94-9a5bbdf8f4fd",
            "be3f2187-1ac4-46fe-9a62-296a088e689f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0a197dc9-1f01-4859-b040-5aadf7ea46c3",
          "title": "User Controller",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
          "file": "\\test\\rest\\controller\\userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "340cfbf7-1aa6-4bf7-8f40-2b071ace3523",
              "title": "POST /users/register",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
              "file": "\\test\\rest\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve registrar um novo usuário com sucesso",
                  "fullTitle": "User Controller POST /users/register Deve registrar um novo usuário com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioTeste\", password: \"senha123\" });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.have.property(\"username\", \"usuarioTeste\");\nexpect(response.body).to.have.property(\"favorecidos\");",
                  "err": {},
                  "uuid": "df4646ab-71c5-46a6-b02f-7e898f40f621",
                  "parentUUID": "340cfbf7-1aa6-4bf7-8f40-2b071ace3523",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve registrar usuário sem username ou password",
                  "fullTitle": "User Controller POST /users/register Não deve registrar usuário sem username ou password",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"\", password: \"\" });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Usuário e senha são obrigatórios\"\n);",
                  "err": {},
                  "uuid": "5d62157b-fcac-42ad-b4a9-bedff4acb1dd",
                  "parentUUID": "340cfbf7-1aa6-4bf7-8f40-2b071ace3523",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve registrar usuário duplicado",
                  "fullTitle": "User Controller POST /users/register Não deve registrar usuário duplicado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioDuplicado\", password: \"senha123\" });\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioDuplicado\", password: \"senha123\" });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\");",
                  "err": {},
                  "uuid": "ad5e0d61-059a-4694-9f83-05adbac6800f",
                  "parentUUID": "340cfbf7-1aa6-4bf7-8f40-2b071ace3523",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df4646ab-71c5-46a6-b02f-7e898f40f621",
                "5d62157b-fcac-42ad-b4a9-bedff4acb1dd",
                "ad5e0d61-059a-4694-9f83-05adbac6800f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f002f2a6-8214-4d5f-baf9-249cf259a129",
              "title": "POST /users/login",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
              "file": "\\test\\rest\\controller\\userController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /users/login\"",
                  "fullTitle": "User Controller POST /users/login \"before all\" hook in \"POST /users/login\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioLogin\", password: \"senha123\" });",
                  "err": {},
                  "uuid": "453f715a-5c17-4381-b207-fc6b91d6a287",
                  "parentUUID": "f002f2a6-8214-4d5f-baf9-249cf259a129",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve fazer login com sucesso e retornar token",
                  "fullTitle": "User Controller POST /users/login Deve fazer login com sucesso e retornar token",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send({ username: \"usuarioLogin\", password: \"senha123\" });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property(\"token\");\nexpect(response.body).to.have.property(\"username\", \"usuarioLogin\");\nexpect(response.body).to.have.property(\"favorecidos\");\nexpect(response.body).to.have.property(\"saldo\");",
                  "err": {},
                  "uuid": "beb0b08b-5b63-4a29-99c7-01fbdd235607",
                  "parentUUID": "f002f2a6-8214-4d5f-baf9-249cf259a129",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve logar com senha errada",
                  "fullTitle": "User Controller POST /users/login Não deve logar com senha errada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send({ username: \"usuarioLogin\", password: \"senhaErrada\" });\nexpect(response.status).to.equal(401);\nexpect(response.body).to.have.property(\"error\");",
                  "err": {},
                  "uuid": "72db65cc-e183-48fd-9aeb-a4e739da8302",
                  "parentUUID": "f002f2a6-8214-4d5f-baf9-249cf259a129",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve logar sem username ou password",
                  "fullTitle": "User Controller POST /users/login Não deve logar sem username ou password",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send({ username: \"\", password: \"\" });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Usuário e senha são obrigatórios\"\n);",
                  "err": {},
                  "uuid": "c787f919-8617-4d32-a3b7-ad1e2b223401",
                  "parentUUID": "f002f2a6-8214-4d5f-baf9-249cf259a129",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "beb0b08b-5b63-4a29-99c7-01fbdd235607",
                "72db65cc-e183-48fd-9aeb-a4e739da8302",
                "c787f919-8617-4d32-a3b7-ad1e2b223401"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "9805431c-d333-4f2b-aff1-482975c9b2f7",
              "title": "GET /users",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
              "file": "\\test\\rest\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve listar todos os usuários cadastrados",
                  "fullTitle": "User Controller GET /users Deve listar todos os usuários cadastrados",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app).get(\"/users\");\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");\nexpect(response.body.length).to.be.greaterThan(0);",
                  "err": {},
                  "uuid": "264934a8-5e78-4f37-bfce-4aea69781c77",
                  "parentUUID": "9805431c-d333-4f2b-aff1-482975c9b2f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "264934a8-5e78-4f37-bfce-4aea69781c77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "bda2713b-8346-4c5d-9c26-df3550d6cdd0",
          "title": "Transfer Controller - External API",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\external\\transfer.external.test.js",
          "file": "\\test\\rest\\external\\transfer.external.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Transfer Controller - External API\"",
              "fullTitle": "Transfer Controller - External API \"before all\" hook in \"Transfer Controller - External API\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Garante que os usuários existem\nawait api\n  .post(\"/users/register\")\n  .send({ username: \"novoUsuarioExt\", password: \"senha123\" });\nawait api\n  .post(\"/users/register\")\n  .send({ username: \"novoUsuario1Ext\", password: \"senha123\" });",
              "err": {},
              "uuid": "a703c243-3ef3-4420-9cbd-d48a6c837654",
              "parentUUID": "bda2713b-8346-4c5d-9c26-df3550d6cdd0",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Transfer Controller - External API\"",
              "fullTitle": "Transfer Controller - External API \"before each\" hook in \"Transfer Controller - External API\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Faz login para obter token\nconst respostaLogin = await api\n  .post(\"/users/login\")\n  .send({ username: \"novoUsuarioExt\", password: \"senha123\" });\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "3ae07abc-c1cd-40a5-9fc5-9469d22ed320",
              "parentUUID": "bda2713b-8346-4c5d-9c26-df3550d6cdd0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Realizar uma transferência para usuário não cadastrado",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência para usuário não cadastrado",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"stopa\", to: \"alberto\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Usuário não encontrado\");",
              "err": {},
              "uuid": "4321f611-5687-4ef4-83b0-bd900c1c396d",
              "parentUUID": "bda2713b-8346-4c5d-9c26-df3550d6cdd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência não informando os usuários de envio e recebimento",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência não informando os usuários de envio e recebimento",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"\", to: \"\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
              "err": {},
              "uuid": "80f18a74-7a7b-4f39-b72b-d870d9c59ec7",
              "parentUUID": "bda2713b-8346-4c5d-9c26-df3550d6cdd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência com saldo insuficiente",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência com saldo insuficiente",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 20000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Saldo insuficiente\");",
              "err": {},
              "uuid": "1d996c6d-4288-4f8a-b974-c88b55ec40de",
              "parentUUID": "bda2713b-8346-4c5d-9c26-df3550d6cdd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência com valor negativo",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência com valor negativo",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: -1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
              "err": {},
              "uuid": "0f8b809c-f6ed-4473-b9ca-109cecc3bd09",
              "parentUUID": "bda2713b-8346-4c5d-9c26-df3550d6cdd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência com valor zero",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência com valor zero",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 0 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
              "err": {},
              "uuid": "f5adfaff-573d-4e5e-a168-79acd065d80a",
              "parentUUID": "bda2713b-8346-4c5d-9c26-df3550d6cdd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar 401 se não enviar token",
              "fullTitle": "Transfer Controller - External API Deve retornar 401 se não enviar token",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 1000 });\nexpect(response.status).to.equal(401);\nexpect(response.body).to.have.property(\"error\");",
              "err": {},
              "uuid": "fa649faf-d601-40bf-b78f-55a334506ba5",
              "parentUUID": "bda2713b-8346-4c5d-9c26-df3550d6cdd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência autenticada",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência autenticada",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 10 });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.have.property(\"from\", \"novoUsuarioExt\");\nexpect(response.body).to.have.property(\"to\", \"novoUsuario1Ext\");\nexpect(response.body).to.have.property(\"amount\", 10);",
              "err": {},
              "uuid": "56935226-7601-474b-9e82-38273eb11bc6",
              "parentUUID": "bda2713b-8346-4c5d-9c26-df3550d6cdd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não permite transferência >= 5000 para não favorecido (external)",
              "fullTitle": "Transfer Controller - External API Não permite transferência >= 5000 para não favorecido (external)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario1Ext\", to: \"novoUsuarioExt\", amount: 5000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Transferências acima de R$ 5.000,00 só para favorecidos\"\n);",
              "err": {},
              "uuid": "1a6858c0-f3d7-4897-809a-46fedad0880d",
              "parentUUID": "bda2713b-8346-4c5d-9c26-df3550d6cdd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar as transferências realizadas em memória",
              "fullTitle": "Transfer Controller - External API Deve listar as transferências realizadas em memória",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const valores = [500, 1233, 1333];\nfor (const amount of valores) {\n  await api\n    .post(\"/transfers\")\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount });\n}\nconst response = await api\n  .get(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`);\n// console.log(\"Listagem de transferências:\", response.body);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");\nfor (const amount of valores) {\n  expect(\n    response.body.some(\n      (t) =>\n        t.from === \"novoUsuarioExt\" &&\n        t.to === \"novoUsuario1Ext\" &&\n        t.amount === amount\n    )\n  ).to.be.true;\n}",
              "err": {},
              "uuid": "3b08a455-4cbd-4617-87c7-f9394f23bae2",
              "parentUUID": "bda2713b-8346-4c5d-9c26-df3550d6cdd0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4321f611-5687-4ef4-83b0-bd900c1c396d",
            "80f18a74-7a7b-4f39-b72b-d870d9c59ec7",
            "1d996c6d-4288-4f8a-b974-c88b55ec40de",
            "0f8b809c-f6ed-4473-b9ca-109cecc3bd09",
            "f5adfaff-573d-4e5e-a168-79acd065d80a",
            "fa649faf-d601-40bf-b78f-55a334506ba5",
            "56935226-7601-474b-9e82-38273eb11bc6",
            "1a6858c0-f3d7-4897-809a-46fedad0880d",
            "3b08a455-4cbd-4617-87c7-f9394f23bae2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "2a124405-7882-4972-8a43-ff65940804d9",
          "title": "User Controller - External API",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\external\\user.external.test.js",
          "file": "\\test\\rest\\external\\user.external.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve registrar um novo usuário via API externa",
              "fullTitle": "User Controller - External API Deve registrar um novo usuário via API externa",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/users/register\")\n  .send({ username: \"usuarioExt\", password: \"senha123\" });\nexpect([201, 400]).to.include(response.status); // 400 se já existir",
              "err": {},
              "uuid": "3b444097-7504-41b3-85f4-a16639108a62",
              "parentUUID": "2a124405-7882-4972-8a43-ff65940804d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve fazer login via API externa",
              "fullTitle": "User Controller - External API Deve fazer login via API externa",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/users/login\")\n  .send({ username: \"usuarioExt\", password: \"senha123\" });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property(\"token\");",
              "err": {},
              "uuid": "67c3e5ab-9ae0-4709-ac60-55a1a4632359",
              "parentUUID": "2a124405-7882-4972-8a43-ff65940804d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários via API externa",
              "fullTitle": "User Controller - External API Deve listar usuários via API externa",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api.get(\"/users\");\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");",
              "err": {},
              "uuid": "92af479f-8e20-4b99-8c2b-f19770de17a6",
              "parentUUID": "2a124405-7882-4972-8a43-ff65940804d9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3b444097-7504-41b3-85f4-a16639108a62",
            "67c3e5ab-9ae0-4709-ac60-55a1a4632359",
            "92af479f-8e20-4b99-8c2b-f19770de17a6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}