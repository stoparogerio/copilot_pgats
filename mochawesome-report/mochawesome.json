{
  "stats": {
    "suites": 9,
    "tests": 33,
    "passes": 33,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-21T19:47:32.878Z",
    "end": "2025-09-21T19:47:33.114Z",
    "duration": 236,
    "testsRegistered": 33,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "928032f5-3e43-42f9-acb3-b69c00a8568f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8a3965db-88a6-49ca-8ae4-0e9bef6a692e",
          "title": "Transfer Controller",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\transferController.test.js",
          "file": "\\test\\rest\\controller\\transferController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "904df800-d409-40b7-a81d-c8b1e7568dca",
              "title": "POST /transfers",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\transferController.test.js",
              "file": "\\test\\rest\\controller\\transferController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /transfers\"",
                  "fullTitle": "Transfer Controller POST /transfers \"before all\" hook in \"POST /transfers\"",
                  "timedOut": false,
                  "duration": 27,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post(\"/users/register\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\nawait request(app).post(\"/users/register\").send({\n  username: \"novoUsuario1\",\n  password: \"senha123\",\n});",
                  "err": {},
                  "uuid": "c1bcf594-8663-403f-9f65-9ea6be82350e",
                  "parentUUID": "904df800-d409-40b7-a81d-c8b1e7568dca",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"before each\" hook in \"POST /transfers\"",
                  "fullTitle": "Transfer Controller POST /transfers \"before each\" hook in \"POST /transfers\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(app).post(\"/users/login\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\ntoken = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "f3aed6bd-1e6f-48b7-a174-faa544c7330b",
                  "parentUUID": "904df800-d409-40b7-a81d-c8b1e7568dca",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Realizar uma transferência para usuário não cadastrado",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência para usuário não cadastrado",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"stopa\", to: \"alberto\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Usuário não encontrado\");",
                  "err": {},
                  "uuid": "e7ede76d-7133-49a7-b608-df040fc33f1f",
                  "parentUUID": "904df800-d409-40b7-a81d-c8b1e7568dca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência não informando os usuários de envio e recebimento",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência não informando os usuários de envio e recebimento",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"\", to: \"\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
                  "err": {},
                  "uuid": "f2bd61b1-4fd7-42d3-9566-454134a39968",
                  "parentUUID": "904df800-d409-40b7-a81d-c8b1e7568dca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência com saldo insuficiente",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência com saldo insuficiente",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 20000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Saldo insuficiente\");",
                  "err": {},
                  "uuid": "965987c9-a80b-413a-9281-0632c2ddcf42",
                  "parentUUID": "904df800-d409-40b7-a81d-c8b1e7568dca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência com valor negativo",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência com valor negativo",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: -1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
                  "err": {},
                  "uuid": "b1e89c28-a20b-4602-b395-6dce3db26e6f",
                  "parentUUID": "904df800-d409-40b7-a81d-c8b1e7568dca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência com valor zero",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência com valor zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 0 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
                  "err": {},
                  "uuid": "bd6c6ae3-6f81-43f3-af88-08af89aa16a3",
                  "parentUUID": "904df800-d409-40b7-a81d-c8b1e7568dca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 401 se não enviar token",
                  "fullTitle": "Transfer Controller POST /transfers Deve retornar 401 se não enviar token",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(response.status).to.equal(401);\nexpect(response.body).to.have.property(\"error\");",
                  "err": {},
                  "uuid": "e85e9315-f567-46cf-b2b5-e1134fce3506",
                  "parentUUID": "904df800-d409-40b7-a81d-c8b1e7568dca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Realizar uma transferência autenticada",
                  "fullTitle": "Transfer Controller POST /transfers Realizar uma transferência autenticada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.have.property(\"from\", \"novoUsuario\");\nexpect(response.body).to.have.property(\"to\", \"novoUsuario1\");\nexpect(response.body).to.have.property(\"amount\", 1000);\n// console.log(\"Token usado:\", token);\n// console.log(\"Response body:\", response.body);",
                  "err": {},
                  "uuid": "5cc60ece-5773-49c6-8979-479cd0a05521",
                  "parentUUID": "904df800-d409-40b7-a81d-c8b1e7568dca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não permite transferência >= 5000 para não favorecido",
                  "fullTitle": "Transfer Controller POST /transfers Não permite transferência >= 5000 para não favorecido",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 5000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Transferências acima de R$ 5.000,00 só para favorecidos\"\n);\n// console.log(\"Response body:\", response.body);",
                  "err": {},
                  "uuid": "8c4aa27b-fa87-42fe-b14a-23647bcd38ea",
                  "parentUUID": "904df800-d409-40b7-a81d-c8b1e7568dca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve listar as transferências realizadas em memória",
                  "fullTitle": "Transfer Controller POST /transfers Deve listar as transferências realizadas em memória",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const valores = [500, 1233, 1333];\nfor (const amount of valores) {\n  await request(app)\n    .post(\"/transfers\")\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount });\n}\nconst response = await request(app)\n  .get(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`);\n// console.log(\"Listagem de transferências:\", response.body);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");\nfor (const amount of valores) {\n  expect(\n    response.body.some(\n      (t) =>\n        t.from === \"novoUsuario\" &&\n        t.to === \"novoUsuario1\" &&\n        t.amount === amount\n    )\n  ).to.be.true;\n}",
                  "err": {},
                  "uuid": "87e6a380-824e-4119-9671-dd79a5f579bd",
                  "parentUUID": "904df800-d409-40b7-a81d-c8b1e7568dca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7ede76d-7133-49a7-b608-df040fc33f1f",
                "f2bd61b1-4fd7-42d3-9566-454134a39968",
                "965987c9-a80b-413a-9281-0632c2ddcf42",
                "b1e89c28-a20b-4602-b395-6dce3db26e6f",
                "bd6c6ae3-6f81-43f3-af88-08af89aa16a3",
                "e85e9315-f567-46cf-b2b5-e1134fce3506",
                "5cc60ece-5773-49c6-8979-479cd0a05521",
                "8c4aa27b-fa87-42fe-b14a-23647bcd38ea",
                "87e6a380-824e-4119-9671-dd79a5f579bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 41,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "86f7e217-64c4-4383-b364-6aea957843e7",
          "title": "Transfer Controller - Unit",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\transferController.unit.test.js",
          "file": "\\test\\rest\\controller\\transferController.unit.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Transfer Controller - Unit\"",
              "fullTitle": "Transfer Controller - Unit \"before all\" hook in \"Transfer Controller - Unit\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post(\"/users/register\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\nawait request(app).post(\"/users/register\").send({\n  username: \"novoUsuario1\",\n  password: \"senha123\",\n});",
              "err": {},
              "uuid": "bbd0eff9-c1f5-43c2-bfc8-8c240abc0f31",
              "parentUUID": "86f7e217-64c4-4383-b364-6aea957843e7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Transfer Controller - Unit\"",
              "fullTitle": "Transfer Controller - Unit \"before each\" hook in \"Transfer Controller - Unit\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respostaLogin = await request(app).post(\"/users/login\").send({\n  username: \"novoUsuario\",\n  password: \"senha123\",\n});\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "79b2cf79-ee78-4b2c-a9b7-e3370a1c66f7",
              "parentUUID": "86f7e217-64c4-4383-b364-6aea957843e7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Transfer Controller - Unit\"",
              "fullTitle": "Transfer Controller - Unit \"after each\" hook in \"Transfer Controller - Unit\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "99252a77-5c81-4a77-844e-e4c61bf89292",
              "parentUUID": "86f7e217-64c4-4383-b364-6aea957843e7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Deve retornar erro do service ao tentar transferir (stub)",
              "fullTitle": "Transfer Controller - Unit Deve retornar erro do service ao tentar transferir (stub)",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.stub(transferService, \"transfer\").throws(new Error(\"Erro simulado\"));\nconst response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Erro simulado\");",
              "err": {},
              "uuid": "077d6b2d-3a30-4eef-9705-f8091d3d96d9",
              "parentUUID": "86f7e217-64c4-4383-b364-6aea957843e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve chamar o service de transferência uma vez (spy)",
              "fullTitle": "Transfer Controller - Unit Deve chamar o service de transferência uma vez (spy)",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spy = sinon.spy(transferService, \"transfer\");\nawait request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 1000 });\nexpect(spy.calledOnce).to.be.true;\nspy.restore();",
              "err": {},
              "uuid": "9500dcf3-b031-4086-a68c-fffd0dffda73",
              "parentUUID": "86f7e217-64c4-4383-b364-6aea957843e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve simular retorno de sucesso do service (stub)",
              "fullTitle": "Transfer Controller - Unit Deve simular retorno de sucesso do service (stub)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeTransfer = {\n  from: \"novoUsuario\",\n  to: \"novoUsuario1\",\n  amount: 123,\n  date: new Date(),\n};\nsinon.stub(transferService, \"transfer\").returns(fakeTransfer);\nconst response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 123 });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.include({\n  from: \"novoUsuario\",\n  to: \"novoUsuario1\",\n  amount: 123,\n});",
              "err": {},
              "uuid": "9fd85b52-8769-4710-b24d-6e976574789e",
              "parentUUID": "86f7e217-64c4-4383-b364-6aea957843e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve usar mock para esperar chamada do service",
              "fullTitle": "Transfer Controller - Unit Deve usar mock para esperar chamada do service",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mock = sinon.mock(transferService);\nmock\n  .expects(\"transfer\")\n  .once()\n  .withArgs({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 555 });\nawait request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 555 });\nmock.verify();\nmock.restore();",
              "err": {},
              "uuid": "4760555e-8647-41d7-ac28-f02825654288",
              "parentUUID": "86f7e217-64c4-4383-b364-6aea957843e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não permite transferência >= 5000 para não favorecido (unit)",
              "fullTitle": "Transfer Controller - Unit Não permite transferência >= 5000 para não favorecido (unit)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon\n  .stub(transferService, \"transfer\")\n  .throws(\n    new Error(\"Transferências acima de R$ 5.000,00 só para favorecidos\")\n  );\nconst response = await request(app)\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario\", to: \"novoUsuario1\", amount: 5000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Transferências acima de R$ 5.000,00 só para favorecidos\"\n);\n// console.log(\"Response body:\", response.body);",
              "err": {},
              "uuid": "4a67e872-8346-4bc5-8333-d906a6b6aab4",
              "parentUUID": "86f7e217-64c4-4383-b364-6aea957843e7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "077d6b2d-3a30-4eef-9705-f8091d3d96d9",
            "9500dcf3-b031-4086-a68c-fffd0dffda73",
            "9fd85b52-8769-4710-b24d-6e976574789e",
            "4760555e-8647-41d7-ac28-f02825654288",
            "4a67e872-8346-4bc5-8333-d906a6b6aab4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "4c6869ca-8797-4d49-a964-dba330297f4a",
          "title": "User Controller",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
          "file": "\\test\\rest\\controller\\userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0dfa0e55-8247-4f07-aa31-638ae75482f5",
              "title": "POST /users/register",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
              "file": "\\test\\rest\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve registrar um novo usuário com sucesso",
                  "fullTitle": "User Controller POST /users/register Deve registrar um novo usuário com sucesso",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioTeste\", password: \"senha123\" });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.have.property(\"username\", \"usuarioTeste\");\nexpect(response.body).to.have.property(\"favorecidos\");",
                  "err": {},
                  "uuid": "55c5e2dc-3bce-4b00-a305-e363e261ce23",
                  "parentUUID": "0dfa0e55-8247-4f07-aa31-638ae75482f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve registrar usuário sem username ou password",
                  "fullTitle": "User Controller POST /users/register Não deve registrar usuário sem username ou password",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"\", password: \"\" });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Usuário e senha são obrigatórios\"\n);",
                  "err": {},
                  "uuid": "72b6e04f-11de-47e7-b0ab-86399a9fc3cd",
                  "parentUUID": "0dfa0e55-8247-4f07-aa31-638ae75482f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve registrar usuário duplicado",
                  "fullTitle": "User Controller POST /users/register Não deve registrar usuário duplicado",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioDuplicado\", password: \"senha123\" });\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioDuplicado\", password: \"senha123\" });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\");",
                  "err": {},
                  "uuid": "24cc5071-87d6-4673-ac00-95b71a66ed1e",
                  "parentUUID": "0dfa0e55-8247-4f07-aa31-638ae75482f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55c5e2dc-3bce-4b00-a305-e363e261ce23",
                "72b6e04f-11de-47e7-b0ab-86399a9fc3cd",
                "24cc5071-87d6-4673-ac00-95b71a66ed1e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e441402d-baf1-486b-8c87-4fca60f460e9",
              "title": "POST /users/login",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
              "file": "\\test\\rest\\controller\\userController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /users/login\"",
                  "fullTitle": "User Controller POST /users/login \"before all\" hook in \"POST /users/login\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .post(\"/users/register\")\n  .send({ username: \"usuarioLogin\", password: \"senha123\" });",
                  "err": {},
                  "uuid": "22def82b-2ef4-4dfd-9ee4-441cf3e4a072",
                  "parentUUID": "e441402d-baf1-486b-8c87-4fca60f460e9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve fazer login com sucesso e retornar token",
                  "fullTitle": "User Controller POST /users/login Deve fazer login com sucesso e retornar token",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send({ username: \"usuarioLogin\", password: \"senha123\" });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property(\"token\");\nexpect(response.body).to.have.property(\"username\", \"usuarioLogin\");\nexpect(response.body).to.have.property(\"favorecidos\");\nexpect(response.body).to.have.property(\"saldo\");",
                  "err": {},
                  "uuid": "d76c588a-64ba-483b-bfd8-3940eae8cc0f",
                  "parentUUID": "e441402d-baf1-486b-8c87-4fca60f460e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve logar com senha errada",
                  "fullTitle": "User Controller POST /users/login Não deve logar com senha errada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send({ username: \"usuarioLogin\", password: \"senhaErrada\" });\nexpect(response.status).to.equal(401);\nexpect(response.body).to.have.property(\"error\");",
                  "err": {},
                  "uuid": "87fbc159-dc8c-4b28-951d-fd597419cf2b",
                  "parentUUID": "e441402d-baf1-486b-8c87-4fca60f460e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve logar sem username ou password",
                  "fullTitle": "User Controller POST /users/login Não deve logar sem username ou password",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send({ username: \"\", password: \"\" });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Usuário e senha são obrigatórios\"\n);",
                  "err": {},
                  "uuid": "c81835b1-af24-49a6-8315-76e7607700e0",
                  "parentUUID": "e441402d-baf1-486b-8c87-4fca60f460e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d76c588a-64ba-483b-bfd8-3940eae8cc0f",
                "87fbc159-dc8c-4b28-951d-fd597419cf2b",
                "c81835b1-af24-49a6-8315-76e7607700e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f7462e5e-8ec0-4e4e-9501-c319823c29f6",
              "title": "GET /users",
              "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\controller\\userController.test.js",
              "file": "\\test\\rest\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve listar todos os usuários cadastrados",
                  "fullTitle": "User Controller GET /users Deve listar todos os usuários cadastrados",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app).get(\"/users\");\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");\nexpect(response.body.length).to.be.greaterThan(0);",
                  "err": {},
                  "uuid": "73b81071-52ea-4d1d-b553-29d38709753e",
                  "parentUUID": "f7462e5e-8ec0-4e4e-9501-c319823c29f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "73b81071-52ea-4d1d-b553-29d38709753e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d6dcddac-c7c6-4be0-8a57-29748e7371bb",
          "title": "Transfer Controller - External API",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\external\\transfer.external.test.js",
          "file": "\\test\\rest\\external\\transfer.external.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Transfer Controller - External API\"",
              "fullTitle": "Transfer Controller - External API \"before all\" hook in \"Transfer Controller - External API\"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Garante que os usuários existem\nawait api\n  .post(\"/users/register\")\n  .send({ username: \"novoUsuarioExt\", password: \"senha123\" });\nawait api\n  .post(\"/users/register\")\n  .send({ username: \"novoUsuario1Ext\", password: \"senha123\" });",
              "err": {},
              "uuid": "69901997-cae5-493e-bb4f-7c338370869b",
              "parentUUID": "d6dcddac-c7c6-4be0-8a57-29748e7371bb",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Transfer Controller - External API\"",
              "fullTitle": "Transfer Controller - External API \"before each\" hook in \"Transfer Controller - External API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Faz login para obter token\nconst respostaLogin = await api\n  .post(\"/users/login\")\n  .send({ username: \"novoUsuarioExt\", password: \"senha123\" });\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "98d59000-6793-44ed-99c2-a4c55d97ebf1",
              "parentUUID": "d6dcddac-c7c6-4be0-8a57-29748e7371bb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Realizar uma transferência para usuário não cadastrado",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência para usuário não cadastrado",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"stopa\", to: \"alberto\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Usuário não encontrado\");",
              "err": {},
              "uuid": "44ded1b0-c6db-4ecd-93aa-333db9441ec3",
              "parentUUID": "d6dcddac-c7c6-4be0-8a57-29748e7371bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência não informando os usuários de envio e recebimento",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência não informando os usuários de envio e recebimento",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"\", to: \"\", amount: 1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
              "err": {},
              "uuid": "9f5e82c6-955c-4d0c-896c-4a22cfdbb544",
              "parentUUID": "d6dcddac-c7c6-4be0-8a57-29748e7371bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência com saldo insuficiente",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência com saldo insuficiente",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 20000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\"error\", \"Saldo insuficiente\");",
              "err": {},
              "uuid": "cab47367-6a36-42b1-96e2-0cb88ee6ab18",
              "parentUUID": "d6dcddac-c7c6-4be0-8a57-29748e7371bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência com valor negativo",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência com valor negativo",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: -1000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
              "err": {},
              "uuid": "d8fa59f7-c8a6-4431-ac22-b0d19909c8dc",
              "parentUUID": "d6dcddac-c7c6-4be0-8a57-29748e7371bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência com valor zero",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência com valor zero",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 0 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Campos obrigatórios: from, to, amount (number)\"\n);",
              "err": {},
              "uuid": "bb66e8bf-67b4-4c47-81db-9151a866d1dc",
              "parentUUID": "d6dcddac-c7c6-4be0-8a57-29748e7371bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar 401 se não enviar token",
              "fullTitle": "Transfer Controller - External API Deve retornar 401 se não enviar token",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 1000 });\nexpect(response.status).to.equal(401);\nexpect(response.body).to.have.property(\"error\");",
              "err": {},
              "uuid": "ff9ed4da-9836-4d28-9f37-7b4d71748067",
              "parentUUID": "d6dcddac-c7c6-4be0-8a57-29748e7371bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realizar uma transferência autenticada",
              "fullTitle": "Transfer Controller - External API Realizar uma transferência autenticada",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount: 10 });\nexpect(response.status).to.equal(201);\nexpect(response.body).to.have.property(\"from\", \"novoUsuarioExt\");\nexpect(response.body).to.have.property(\"to\", \"novoUsuario1Ext\");\nexpect(response.body).to.have.property(\"amount\", 10);",
              "err": {},
              "uuid": "e441dc7f-74aa-49b5-829f-37245f71ab4b",
              "parentUUID": "d6dcddac-c7c6-4be0-8a57-29748e7371bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não permite transferência >= 5000 para não favorecido (external)",
              "fullTitle": "Transfer Controller - External API Não permite transferência >= 5000 para não favorecido (external)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ from: \"novoUsuario1Ext\", to: \"novoUsuarioExt\", amount: 5000 });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property(\n  \"error\",\n  \"Transferências acima de R$ 5.000,00 só para favorecidos\"\n);\nconsole.log(\"Response body:\", response.body);",
              "err": {},
              "uuid": "22438a53-97b7-434e-be65-37a56b8eb7a2",
              "parentUUID": "d6dcddac-c7c6-4be0-8a57-29748e7371bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar as transferências realizadas em memória",
              "fullTitle": "Transfer Controller - External API Deve listar as transferências realizadas em memória",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const valores = [500, 1233, 1333];\nfor (const amount of valores) {\n  await api\n    .post(\"/transfers\")\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({ from: \"novoUsuarioExt\", to: \"novoUsuario1Ext\", amount });\n}\nconst response = await api\n  .get(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`);\n// console.log(\"Listagem de transferências:\", response.body);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");\nfor (const amount of valores) {\n  expect(\n    response.body.some(\n      (t) =>\n        t.from === \"novoUsuarioExt\" &&\n        t.to === \"novoUsuario1Ext\" &&\n        t.amount === amount\n    )\n  ).to.be.true;\n}",
              "err": {},
              "uuid": "63e6b41e-0f2a-4447-9dc9-76ad29cfc597",
              "parentUUID": "d6dcddac-c7c6-4be0-8a57-29748e7371bb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "44ded1b0-c6db-4ecd-93aa-333db9441ec3",
            "9f5e82c6-955c-4d0c-896c-4a22cfdbb544",
            "cab47367-6a36-42b1-96e2-0cb88ee6ab18",
            "d8fa59f7-c8a6-4431-ac22-b0d19909c8dc",
            "bb66e8bf-67b4-4c47-81db-9151a866d1dc",
            "ff9ed4da-9836-4d28-9f37-7b4d71748067",
            "e441dc7f-74aa-49b5-829f-37245f71ab4b",
            "22438a53-97b7-434e-be65-37a56b8eb7a2",
            "63e6b41e-0f2a-4447-9dc9-76ad29cfc597"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "fdb9d6cc-ad8a-4670-a946-19a3695015d3",
          "title": "User Controller - External API",
          "fullFile": "C:\\Users\\Stopa\\Documents\\PGATS\\07 - Automação de Testes na Camada de Serviço (API)\\copilot_pgats\\test\\rest\\external\\user.external.test.js",
          "file": "\\test\\rest\\external\\user.external.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve registrar um novo usuário via API externa",
              "fullTitle": "User Controller - External API Deve registrar um novo usuário via API externa",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/users/register\")\n  .send({ username: \"usuarioExt\", password: \"senha123\" });\nexpect([201, 400]).to.include(response.status); // 400 se já existir",
              "err": {},
              "uuid": "faf93733-3d66-4d22-ba0e-653d0d937023",
              "parentUUID": "fdb9d6cc-ad8a-4670-a946-19a3695015d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve fazer login via API externa",
              "fullTitle": "User Controller - External API Deve fazer login via API externa",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api\n  .post(\"/users/login\")\n  .send({ username: \"usuarioExt\", password: \"senha123\" });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property(\"token\");",
              "err": {},
              "uuid": "0c2fbd99-4f99-4fa7-8278-e92cf44f4ad9",
              "parentUUID": "fdb9d6cc-ad8a-4670-a946-19a3695015d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários via API externa",
              "fullTitle": "User Controller - External API Deve listar usuários via API externa",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api.get(\"/users\");\nexpect(response.status).to.equal(200);\nexpect(response.body).to.be.an(\"array\");",
              "err": {},
              "uuid": "6181ac26-f392-45e8-8624-26266d84371e",
              "parentUUID": "fdb9d6cc-ad8a-4670-a946-19a3695015d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "faf93733-3d66-4d22-ba0e-653d0d937023",
            "0c2fbd99-4f99-4fa7-8278-e92cf44f4ad9",
            "6181ac26-f392-45e8-8624-26266d84371e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}